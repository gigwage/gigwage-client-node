/* eslint-disable typescript-sort-keys/interface */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/1099s': {
    /**
     * List 1099s
     * @description Returns a list of 1099s, sorted newest-first.
     */
    get: operations['getApiV11099s'];
    /**
     * Create 1099
     * @description Create a 1099 for a contractor.
     */
    post: operations['postApiV11099s'];
  };
  '/api/v1/1099s/{id}': {
    /**
     * Delete 1099
     * @description Delete a 1099.
     */
    delete: operations['deleteApiV11099sId'];
    /**
     * Show 1099
     * @description Get details of a 1099.
     */
    get: operations['getApiV11099sId'];
    /**
     * Update 1099
     * @description Update a 1099
     */
    patch: operations['patchApiV11099sId'];
  };
  '/api/v1/1099s/{id}/approve': {
    /**
     * Approve 1099
     * @description Mark 1099 as ready to submit to the IRS.
     */
    post: operations['postApiV11099sIdApprove'];
  };
  '/api/v1/1099s/{id}/retrieve': {
    /**
     * Get 1099 PDF URL
     * @description Returns the URL to a PDF of a submitted 1099. The URL expires in 1 hour.
     */
    get: operations['getApiV11099sIdRetrieve'];
  };
  '/api/v1/1099s/{id}/submit': {
    /**
     * Submit 1099 to IRS
     * @description Submit 1099 to the IRS.
     */
    post: operations['postApiV11099sIdSubmit'];
  };
  '/api/v1/api_keys': {
    /**
     * List API keys
     * @description Get a list of all API keys.
     */
    get: operations['getApiV1ApiKeys'];
    /**
     * Create API key
     * @description Create a new API key. Note: This is the only time you'll get the secret.
     */
    post: operations['postApiV1ApiKeys'];
  };
  '/api/v1/api_keys/{id}': {
    /**
     * Revoke API key
     * @description Revoke an API key. Note: The API key currently in use cannot be revoked.
     */
    delete: operations['deleteApiV1ApiKeysId'];
    /**
     * Show API key
     * @description Get details of an existing API key.
     */
    get: operations['getApiV1ApiKeysId'];
  };
  '/api/v1/ar_payments': {
    /**
     * List Accounts Receivable payments
     * @description List Accounts Receivable payments.
     */
    get: operations['getApiV1ArPayments'];
    /**
     * Create Accounts Receivable Payment
     * @description Creates a new Accounts Receivable Payment.
     */
    post: operations['postApiV1ArPayments'];
  };
  '/api/v1/ar_payments/{id}': {
    /**
     * Return an Accounts Receivable Payment
     * @description Returns the details for Accounts Receivable Payment
     */
    get: operations['getApiV1ArPaymentsId'];
  };
  '/api/v1/balance': {
    /**
     * Show balance
     * @description Returns the current and available balance for the account.
     */
    get: operations['getApiV1Balance'];
  };
  '/api/v1/contractors/{contractor_id}/accounts/{id}': {
    /**
     * Deactivate account
     * @description Deactivate contractor's bank account.
     */
    delete: operations['deleteApiV1ContractorsContractorIdAccountsId'];
    /**
     * Get account detail
     * @description Get details of an existing bank account.
     */
    get: operations['getApiV1ContractorsContractorIdAccountsId'];
  };
  '/api/v1/contractors/{contractor_id}/cards': {
    /**
     * Add contractor debit card
     * @description Add debit card to contractor
     */
    post: operations['postApiV1ContractorsContractorIdCards'];
  };
  '/api/v1/contractors/{contractor_id}/identity_document': {
    /**
     * Create contractor's identity document
     * @description Upload identity document
     */
    post: operations['postApiV1ContractorsContractorIdIdentityDocument'];
  };
  '/api/v1/payments': {
    /**
     * List sent payments
     * @description Returns a list of payments, sorted newest first.
     */
    get: operations['getApiV1Payments'];
    /**
     * Send payment
     * @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours.
     */
    post: operations['postApiV1Payments'];
  };
  '/api/v1/payments/{id}/retry': {
    /**
     * Retry payment
     * @description Retry a canceled or returned payment.
     */
    post: operations['postApiV1PaymentsIdRetry'];
  };
  '/api/v1/payments/{id}': {
    /**
     * Delete payment
     * @description Attempts to cancel a payment. Once the debit from the payer's account has been finalized cancelling is not possible.
     */
    delete: operations['deleteApiV1PaymentsId'];
    /**
     * Update payment
     * @description Update a payment's metadata.
     */
    put: operations['putApiV1PaymentsId'];
    /**
     * Show payment
     * @description Returns the details for a single payment, including an array of line item details and the id of the contractor associated with the payment.
     */
    get: operations['getApiV1PaymentsId'];
  };
  '/api/v1/line_items/{id}': {
    /**
     * Update line item
     * @description Update a line item's metadata.
     */
    put: operations['putApiV1LineItemsId'];
  };
  '/api/v1/transfers': {
    /**
     * List transfers
     * @description Get a list of all transfers.
     */
    get: operations['getApiV1Transfers'];
    /**
     * Create transfer
     * @description Create a transfer transaction.
     */
    post: operations['postApiV1Transfers'];
  };
  '/api/v1/transfers/{id}': {
    /**
     * Delete transfer
     * @description Attempt to cancel a transfer.
     */
    delete: operations['deleteApiV1TransfersId'];
    /**
     * Show transfer
     * @description Get details of an existing transfer.
     */
    get: operations['getApiV1TransfersId'];
  };
  '/api/v1/contractors/{id}/tin_check': {
    /**
     * Create a TIN check
     * @description Verify a contractor's TIN is valid. Note: TIN checks are automatically run on POST and PATCH W9 endpoints
     */
    post: operations['postApiV1ContractorsIdTinCheck'];
  };
  '/api/v1/businesses/{business_id}/balance': {
    /**
     * Show balance
     * @description Returns the current and available balance for the account.
     */
    get: operations['getApiV1BusinessesBusinessIdBalance'];
  };
  '/api/v1/subscriptions': {
    /**
     * List subscriptions
     * @description Returns a list of all subscriptions.
     */
    get: operations['getApiV1Subscriptions'];
    /**
     * Create subscription
     * @description Subscribe to webhooks of the chosen type. Please note that multiple consecutive failures to deliver webhooks will deactivate this subscription, and it will need to be reactivated. See PUT below.
     */
    post: operations['postApiV1Subscriptions'];
  };
  '/api/v1/subscriptions/{id}': {
    /**
     * Delete subscription
     * @description Permanently remove a subscription.
     */
    delete: operations['deleteApiV1SubscriptionsId'];
    /**
     * Reactivate subscription
     * @description Reactivate an inactive subscription.
     */
    put: operations['putApiV1SubscriptionsId'];
    /**
     * Show subscription
     * @description Get the details of a subscription.
     */
    get: operations['getApiV1SubscriptionsId'];
    /**
     * Update subscription URL
     * @description Change the URL where webhooks are sent.
     */
    patch: operations['patchApiV1SubscriptionsId'];
  };
  '/api/v1/subscriptions/{id}/deactivate': {
    /**
     * Deactivate subscription
     * @description Deactivate a subscription.
     */
    delete: operations['deleteApiV1SubscriptionsIdDeactivate'];
  };
  '/api/v1/batches': {
    /**
     * List batches
     * @description Returns a list of batches, sorted newest-first.
     */
    get: operations['getApiV1Batches'];
    /**
     * Create batch
     * @description Creates a new batch of payments.
     */
    post: operations['postApiV1Batches'];
  };
  '/api/v1/batches/{id}/payments': {
    /**
     * Show batch payments
     * @description Returns the payments from a single batch.
     */
    get: operations['getApiV1BatchesIdPayments'];
  };
  '/api/v1/batches/{id}': {
    /**
     * Show batch
     * @description Returns the details of a single batch.
     */
    get: operations['getApiV1BatchesId'];
  };
  '/api/v1/contractors/{contractor_id}/accounts': {
    /**
     * List contractor accounts
     * @description List all accounts for the contractor.
     */
    get: operations['getApiV1ContractorsContractorIdAccounts'];
    /**
     * Add account to contractor
     * @description Add a bank account to an existing contractor.
     */
    post: operations['postApiV1ContractorsContractorIdAccounts'];
  };
  '/api/v1/contractors/find_by': {
    /**
     * Find contractor uniquely
     * @description Find a contractor by email, external_id or id.
     */
    get: operations['getApiV1ContractorsFindBy'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}/tin_check': {
    /**
     * Create a TIN check
     * @description Verify a contractor's TIN is valid. Note: TIN checks are automatically run on POST and PATCH W9 endpoints
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsIdTinCheck'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}': {
    /**
     * Delete a contractor
     * @description Delete contractor record. Note: You can only destroy new contractors that aren't associated with other businesses or that have payments or 1099s
     */
    delete: operations['deleteApiV1BusinessesBusinessIdContractorsId'];
    /**
     * Return a contractor
     * @description Returns the details for a given contractor.
     */
    get: operations['getApiV1BusinessesBusinessIdContractorsId'];
    /**
     * Update a contractor
     * @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed.
     */
    patch: operations['patchApiV1BusinessesBusinessIdContractorsId'];
  };
  '/api/v1/contractors/{id}/1099s': {
    /**
     * List all 1099s for a contractor
     * @description List all 1099s for a contractor
     */
    get: operations['getApiV1ContractorsId1099s'];
  };
  '/api/v1/contractors/{id}/invitations': {
    /**
     * Invite a contractor
     * @description Provides invitation information for the contractor to allow you to send the contractoran onboarding email. If the contractor has an outstanding, unaccepted invitation, the old invitation will be invalidated.
     */
    post: operations['postApiV1ContractorsIdInvitations'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}/invite': {
    /**
     * Send invite to contractor
     * @description Delivers a secure onboarding email invitation to an existing contractor who has never been paid. If the contractor has an outstanding unaccepted invitation, the old invitation will be invalidated.
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsIdInvite'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}/kyc': {
    /**
     * Submit KYC information
     * @description Submit KYC (know your customer) information for a contractor
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsIdKyc'];
  };
  '/api/v1/ledger': {
    /**
     * List transactions
     * @description List transactions.
     */
    get: operations['getApiV1Ledger'];
  };
  '/api/v1/businesses/{business_id}/transfers/{id}': {
    /**
     * Delete transfer
     * @description Attempt to cancel a transfer.
     */
    delete: operations['deleteApiV1BusinessesBusinessIdTransfersId'];
    /**
     * Show transfer
     * @description Get details of an existing transfer.
     */
    get: operations['getApiV1BusinessesBusinessIdTransfersId'];
  };
  '/api/v1/customers/{id}': {
    /**
     * Delete a customer
     * @description Delete customer record. Note: You can only destroy customer that not associated with any Accounts Receivable Payments
     */
    delete: operations['deleteApiV1CustomersId'];
    /**
     * Return a customer
     * @description Returns the details for a given customer.
     */
    get: operations['getApiV1CustomersId'];
    /**
     * Update a customer
     * @description Updates an existing customer
     */
    patch: operations['patchApiV1CustomersId'];
  };
  '/api/v1/contractors/{id}/kyc': {
    /**
     * Submit KYC information
     * @description Submit KYC (know your customer) information for a contractor
     */
    post: operations['postApiV1ContractorsIdKyc'];
  };
  '/api/v1/businesses/{business_id}/line_items/{id}': {
    /**
     * Update line item
     * @description Update a line item's metadata.
     */
    put: operations['putApiV1BusinessesBusinessIdLineItemsId'];
  };
  '/api/v1/businesses/{business_id}/contractors/find_by': {
    /**
     * Find contractor uniquely
     * @description Find a contractor by email, external_id or id.
     */
    get: operations['getApiV1BusinessesBusinessIdContractorsFindBy'];
  };
  '/api/v1/businesses/{business_id}/contractors': {
    /**
     * List contractors
     * @description List contractors.
     */
    get: operations['getApiV1BusinessesBusinessIdContractors'];
    /**
     * Create contractor
     * @description Creates a new contractor.
     */
    post: operations['postApiV1BusinessesBusinessIdContractors'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}/invitations': {
    /**
     * Invite a contractor
     * @description Provides invitation information for the contractor to allow you to send the contractoran onboarding email. If the contractor has an outstanding, unaccepted invitation, the old invitation will be invalidated.
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsIdInvitations'];
  };
  '/api/v1/contractors/{id}': {
    /**
     * Delete a contractor
     * @description Delete contractor record. Note: You can only destroy new contractors that aren't associated with other businesses or that have payments or 1099s
     */
    delete: operations['deleteApiV1ContractorsId'];
    /**
     * Return a contractor
     * @description Returns the details for a given contractor.
     */
    get: operations['getApiV1ContractorsId'];
    /**
     * Update a contractor
     * @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed.
     */
    patch: operations['patchApiV1ContractorsId'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}/1099s': {
    /**
     * List all 1099s for a contractor
     * @description List all 1099s for a contractor
     */
    get: operations['getApiV1BusinessesBusinessIdContractorsId1099s'];
  };
  '/api/v1/contractors': {
    /**
     * List contractors
     * @description List contractors.
     */
    get: operations['getApiV1Contractors'];
    /**
     * Create contractor
     * @description Creates a new contractor.
     */
    // post: operations['postApiV1Contractors'];
  };
  '/api/v1/businesses/{business_id}/contractors/{id}/w9': {
    /**
     * Show W-9 information
     * @description Get W9 information for a contractor.
     */
    get: operations['getApiV1BusinessesBusinessIdContractorsIdW9'];
    /**
     * Update W-9 information
     * @description Update W9 information for a contractor.
     */
    patch: operations['patchApiV1BusinessesBusinessIdContractorsIdW9'];
    /**
     * Submit W-9 information
     * @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsIdW9'];
  };
  '/api/v1/webhooks/{id}': {
    /**
     * Show webhook
     * @description Get webhook details
     */
    get: operations['getApiV1WebhooksId'];
  };
  '/api/v1/businesses/{business_id}/ar_payments': {
    /**
     * List Accounts Receivable payments
     * @description List Accounts Receivable payments.
     */
    get: operations['getApiV1BusinessesBusinessIdArPayments'];
    /**
     * Create Accounts Receivable Payment
     * @description Creates a new Accounts Receivable Payment.
     */
    post: operations['postApiV1BusinessesBusinessIdArPayments'];
  };
  '/api/v1/businesses/{business_id}/contractors/{contractor_id}/accounts': {
    /**
     * List contractor accounts
     * @description List all accounts for the contractor.
     */
    get: operations['getApiV1BusinessesBusinessIdContractorsContractorIdAccounts'];
    /**
     * Add account to contractor
     * @description Add a bank account to an existing contractor.
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsContractorIdAccounts'];
  };
  '/api/v1/businesses/{business_id}/contractors/{contractor_id}/accounts/{id}': {
    /**
     * Deactivate account
     * @description Deactivate contractor's bank account.
     */
    delete: operations['deleteApiV1BusinessesBusinessIdContractorsContractorIdAccountsId'];
    /**
     * Get account detail
     * @description Get details of an existing bank account.
     */
    get: operations['getApiV1BusinessesBusinessIdContractorsContractorIdAccountsId'];
  };
  '/api/v1/businesses/{business_id}/contractors/{contractor_id}/cards': {
    /**
     * Add contractor debit card
     * @description Add debit card to contractor
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsContractorIdCards'];
  };
  '/api/v1/businesses/{business_id}/contractors/{contractor_id}/identity_document': {
    /**
     * Create contractor's identity document
     * @description Upload identity document
     */
    post: operations['postApiV1BusinessesBusinessIdContractorsContractorIdIdentityDocument'];
  };
  '/api/v1/businesses/{business_id}/payments': {
    /**
     * List sent payments
     * @description Returns a list of payments, sorted newest first.
     */
    get: operations['getApiV1BusinessesBusinessIdPayments'];
    /**
     * Send payment
     * @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours.
     */
    post: operations['postApiV1BusinessesBusinessIdPayments'];
  };
  '/api/v1/businesses/{business_id}/payments/{id}/retry': {
    /**
     * Retry payment
     * @description Retry a canceled or returned payment.
     */
    post: operations['postApiV1BusinessesBusinessIdPaymentsIdRetry'];
  };
  '/api/v1/businesses/{business_id}/payments/{id}': {
    /**
     * Delete payment
     * @description Attempts to cancel a payment. Once the debit from the payer's account has been finalized cancelling is not possible.
     */
    delete: operations['deleteApiV1BusinessesBusinessIdPaymentsId'];
    /**
     * Show payment
     * @description Returns the details for a single payment, including an array of line item details and the id of the contractor associated with the payment.
     */
    get: operations['getApiV1BusinessesBusinessIdPaymentsId'];
    /**
     * Update payment
     * @description Update a payment's metadata.
     */
    put: operations['putApiV1BusinessesBusinessIdPaymentsId'];
  };
  '/api/v1/contractors/{id}/invite': {
    /**
     * Send invite to contractor
     * @description Delivers a secure onboarding email invitation to an existing contractor who has never been paid. If the contractor has an outstanding unaccepted invitation, the old invitation will be invalidated.
     */
    post: operations['postApiV1ContractorsIdInvite'];
  };
  '/api/v1/businesses/{business_id}/transfers': {
    /**
     * List transfers
     * @description Get a list of all transfers.
     */
    get: operations['getApiV1BusinessesBusinessIdTransfers'];
    /**
     * Create transfer
     * @description Create a transfer transaction.
     */
    post: operations['postApiV1BusinessesBusinessIdTransfers'];
  };
  '/api/v1/customers': {
    /**
     * List customers
     * @description List customers.
     */
    get: operations['getApiV1Customers'];
    /**
     * Create customer
     * @description Creates a new customer.
     */
    post: operations['postApiV1Customers'];
  };
  '/api/v1/businesses/{business_id}/batches': {
    /**
     * List batches
     * @description Returns a list of batches, sorted newest-first.
     */
    get: operations['getApiV1BusinessesBusinessIdBatches'];
    /**
     * Create batch
     * @description Creates a new batch of payments.
     */
    post: operations['postApiV1BusinessesBusinessIdBatches'];
  };
  '/api/v1/businesses/{business_id}/batches/{id}/payments': {
    /**
     * Show batch payments
     * @description Returns the payments from a single batch.
     */
    get: operations['getApiV1BusinessesBusinessIdBatchesIdPayments'];
  };
  '/api/v1/businesses/{business_id}/batches/{id}': {
    /**
     * Show batch
     * @description Returns the details of a single batch.
     */
    get: operations['getApiV1BusinessesBusinessIdBatchesId'];
  };
  '/api/v1/contractors/{id}/w9': {
    /**
     * Show W-9 information
     * @description Get W9 information for a contractor.
     */
    get: operations['getApiV1ContractorsIdW9'];
    /**
     * Update W-9 information
     * @description Update W9 information for a contractor.
     */
    patch: operations['patchApiV1ContractorsIdW9'];
    /**
     * Submit W-9 information
     * @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint
     */
    post: operations['postApiV1ContractorsIdW9'];
  };
  '/api/v1/businesses/{business_id}/1099s': {
    /**
     * List 1099s
     * @description Returns a list of 1099s, sorted newest-first.
     */
    get: operations['getApiV1BusinessesBusinessId1099s'];
    /**
     * Create 1099
     * @description Create a 1099 for a contractor.
     */
    post: operations['postApiV1BusinessesBusinessId1099s'];
  };
  '/api/v1/businesses/{business_id}/1099s/{id}': {
    /**
     * Delete 1099
     * @description Delete a 1099.
     */
    delete: operations['deleteApiV1BusinessesBusinessId1099sId'];
    /**
     * Show 1099
     * @description Get details of a 1099.
     */
    get: operations['getApiV1BusinessesBusinessId1099sId'];
    /**
     * Update 1099
     * @description Update a 1099
     */
    patch: operations['patchApiV1BusinessesBusinessId1099sId'];
  };
  '/api/v1/businesses/{business_id}/1099s/{id}/retrieve': {
    /**
     * Get 1099 PDF URL
     * @description Returns the URL to a PDF of a submitted 1099. The URL expires in 1 hour.
     */
    get: operations['getApiV1BusinessesBusinessId1099sIdRetrieve'];
  };
  '/api/v1/businesses/{business_id}/1099s/{id}/submit': {
    /**
     * Submit 1099 to IRS
     * @description Submit 1099 to the IRS.
     */
    post: operations['postApiV1BusinessesBusinessId1099sIdSubmit'];
  };
  '/api/v1/businesses/{business_id}/1099s/{id}/approve': {
    /**
     * Approve 1099
     * @description Mark 1099 as ready to submit to the IRS.
     */
    post: operations['postApiV1BusinessesBusinessId1099sIdApprove'];
  };
  '/api/v1/businesses/{business_id}/customers': {
    /**
     * List customers
     * @description List customers.
     */
    get: operations['getApiV1BusinessesBusinessIdCustomers'];
    /**
     * Create customer
     * @description Creates a new customer.
     */
    post: operations['postApiV1BusinessesBusinessIdCustomers'];
  };
  '/api/v1/businesses/{business_id}/customers/{id}': {
    /**
     * Delete a customer
     * @description Delete customer record. Note: You can only destroy customer that not associated with any Accounts Receivable Payments
     */
    delete: operations['deleteApiV1BusinessesBusinessIdCustomersId'];
    /**
     * Return a customer
     * @description Returns the details for a given customer.
     */
    get: operations['getApiV1BusinessesBusinessIdCustomersId'];
    /**
     * Update a customer
     * @description Updates an existing customer
     */
    patch: operations['patchApiV1BusinessesBusinessIdCustomersId'];
  };
  '/api/v1/webhooks': {
    /**
     * List webhooks
     * @description List all webhooks
     */
    get: operations['getApiV1Webhooks'];
  };
  '/api/v1/businesses/{business_id}/ar_payments/{id}': {
    /**
     * Return an Accounts Receivable Payment
     * @description Returns the details for Accounts Receivable Payment
     */
    get: operations['getApiV1BusinessesBusinessIdArPaymentsId'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  headers: never;
  parameters: never;
  pathItems: never;
  requestBodies: never;
  responses: never;
  schemas: {
    /** @description AccountEntity model */
    AccountEntity: {
      /**
       * @description Checking or savings for bank accounts, card type for debit cards
       * @example checking
       */
      account_type?: string;
      /**
       * Format: date-time
       * @description When the bank account record was created
       * @example 2023-01-04T00:04:07.739Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description When the bank account record was deactivated
       * @example 2023-01-04T00:04:07.739Z
       */
      deactivated_at?: string;
      /**
       * Format: int32
       * @description The account's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * @description Last 4 digits of the account number
       * @example 1234
       */
      last4?: string;
      /**
       * @description Account nickname
       * @example Personal checking
       */
      name?: string;
      /**
       * @description Bank routing number
       * @example 10012345
       */
      routing_number?: string;
    };
    /** @description ApiKeyEntity model */
    ApiKeyEntity: {
      /**
       * Format: date-time
       * @description When the api key was created
       * @example 2023-01-04T00:04:07.988Z
       */
      created_at?: string;
      /**
       * @description Key
       * @example abcdef1234
       */
      key?: string;
      /**
       * @description Name
       * @example Production
       */
      name?: string;
      /**
       * Format: date-time
       * @description When the api key was revoked
       * @example 2023-01-04T00:04:07.988Z
       */
      revoked_at?: string;
      /**
       * @description Secret
       * @example abcdef1234
       */
      secret?: string;
    };
    /** @description ArPaymentEntity model */
    ArPaymentEntity: {
      /**
       * Format: float
       * @description The total Accounts Receivable payment amount excluding fees
       * @example 409.4
       */
      amount?: number;
      /**
       * Format: date-time
       * @description When the Accounts Receivable payment was completed, if applicable
       * @example 2022-12-07T00:04:08.144Z
       */
      completed_at?: string;
      /**
       * Format: date-time
       * @description When the Accounts Receivable payment was created
       * @example 2022-12-04T00:04:08.144Z
       */
      created_at?: string;
      customer?: components['schemas']['CustomerEntity'];
      /**
       * Format: int32
       * @example 21488
       */
      customer_id?: number;
      /**
       * @description Optional customer-supplied unique identifier for this payment
       * @example abc123
       */
      external_id?: string;
      /**
       * Format: int32
       * @description The Accounts Receivable payments's unique identifier
       * @example 424542
       */
      id?: number;
      /**
       * @description The current status of the payment
       * @example pending
       */
      status?: string;
      /**
       * @description Reason or description for this Accounts Receivable Payment
       * @example For service fee charge
       */
      reason?: string;
    };
    /** @description BatchEntity model */
    BatchEntity: {
      /**
       * @description Date when batch was created
       * @example 2023-01-04T00:04:08.076Z
       */
      created_at?: string;
      /**
       * Format: int32
       * @description The batch's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description Notes of batch
       * @example This is my note
       */
      notes?: string;
      payments?: components['schemas']['PaymentEntity'][];
      /**
       * Format: int32
       * @description Total payments in batch
       * @example 21
       */
      payments_count?: number;
    };
    /** @description BusinessRelationshipEntity model */
    BusinessRelationshipEntity: {
      /**
       * @description The contractor's 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description The contractor's 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * Format: date
       * @description The contractor's birthdate
       * @example 12/31/2021
       */
      birthdate?: string;
      /**
       * @description The contractor's last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description Optional customer-supplied unique identifier for this contractor
       * @example abc123
       */
      external_id?: string;
      /**
       * @description The contractor has connected an ACH account for receiving payments
       * @example true
       */
      has_ach?: boolean;
      /**
       * @description The contractor has a debit card for receiving payments
       * @example true
       */
      has_debit?: boolean;
      /**
       * Format: date-time
       * @description When the contractor was sent an invitation to onboard
       * @example 2023-01-04T00:04:07.561Z
       */
      invited_at?: string;
      /**
       * Format: date-time
       * @description When the contractor accepted the invitation
       * @example 2023-01-04T00:04:07.561Z
       */
      invitation_accepted_at?: string;
      /**
       * Format: date-time
       * @description When the contractor record was created
       * @example 2023-01-04T00:04:07.561Z
       */
      created_at?: string;
      /**
       * @description The contractor's phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * @description The contractor's first name
       * @example John
       */
      first_name?: string;
      /**
       * Format: int32
       * @description The contractor's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The contractor's email address
       * @example contractor@example.com
       */
      email?: string;
      /**
       * @description The contractor's city
       * @example New York
       */
      city?: string;
      /**
       * @description The contractor's state
       * @example NY
       */
      state?: string;
      /**
       * @description The contractor's social security number
       * @example 222-33-4444
       */
      social_security?: string;
      /**
       * @description The contractor's zip code
       * @example 10010
       */
      zip?: string;
      /** @description Error messages generated by system */
      errors?: string[];
    };
    ContractorEntity: {
      /**
       * @description The contractor's 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description The contractor's 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description The contractor's first name
       * @example John
       */
      first_name?: string;
      /**
       * @description The contractor's last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description The contractor has connected an ACH account for receiving payments
       * @example true
       */
      has_ach?: boolean;
      /**
       * @description The contractor has a debit card for receiving payments
       * @example true
       */
      has_debit?: boolean;
      /**
       * Format: date-time
       * @description When the contractor was sent an invitation to onboard
       * @example 2023-01-04T00:04:07.725Z
       */
      invited_at?: string;
      /**
       * Format: date-time
       * @description When the contractor accepted the invitation
       * @example 2023-01-04T00:04:07.725Z
       */
      invitation_accepted_at?: string;
      /**
       * Format: date-time
       * @description When the contractor record was created
       * @example 2023-01-04T00:04:07.726Z
       */
      created_at?: string;
      /**
       * @description The contractor's phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * Format: date
       * @description The contractor's birthdate
       * @example 12/31/2021
       */
      birthdate?: string;
      /**
       * Format: int32
       * @description The contractor's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The contractor's email address
       * @example contractor@example.com
       */
      email?: string;
      /**
       * @description The contractor's city
       * @example New York
       */
      city?: string;
      /**
       * @description The contractor's social security number
       * @example 222-33-4444
       */
      social_security?: string;
      /**
       * @description The contractor's state
       * @example NY
       */
      state?: string;
      /**
       * @description The contractor's zip code
       * @example 10010
       */
      zip?: string;
    };
    /** @description ContractorInvitationEntity model */
    ContractorInvitationEntity: {
      /**
       * Format: date-time
       * @description When the contractor was sent an invitation to onboard
       * @example 2023-01-04T00:04:07.722Z
       */
      created_at?: string;
      /**
       * @description The contractor's email address
       * @example contractor@example.com
       */
      email?: string;
      /**
       * @description The contractor's first name
       * @example John
       */
      first_name?: string;
      /**
       * Format: int32
       * @description The contractor's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The contractor's invitation token
       * @example 1234567890
       */
      token?: string;
      /**
       * @description The contractor's invitation url
       * @example https://gigwage.com/invite/1234567
       */
      url?: string;
      /**
       * @description The contractor's last name
       * @example Smith
       */
      last_name?: string;
    };
    /** @description CustomerEntity model */
    CustomerEntity: {
      /**
       * Format: int32
       * @description The customer's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The customer's email address
       * @example customer@example.com
       */
      email?: string;
      /**
       * @description The customer's full name
       * @example John
       */
      name?: string;
      /**
       * @description Optional customer-supplied unique identifier for this customer
       * @example abc123
       */
      external_id?: string;
      /**
       * Format: date-time
       * @description When the customer record was created
       * @example 2023-01-04T00:04:08.135Z
       */
      created_at?: string;
      /**
       * @description The customer's phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * @description When the customer record was deleted
       * @example 2023-01-04T00:04:08.135Z
       */
      deleted_at?: string;
      /**
       * @description The customer's 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description The customer's 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description The customer's city
       * @example New York
       */
      city?: string;
      /**
       * @description The customer's state
       * @example NY
       */
      state?: string;
      /**
       * @description The customer's zip code
       * @example 10010
       */
      zip?: string;
    };
    /** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
    postApiV1ContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Allow skip TIN check when nine zeros are passed - '0000000000'
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Submit KYC (know your customer) information for a contractor */
    postApiV1ContractorsIdKyc: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234. Required for non-vendors */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /** @description Update contractor with KYC details and become a Vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's formation date. Required for vendors */
        business_formed_on?: string;
        /** @description Vendor's Industry. Required for vendors */
        industry?: string;
        /** @description Vendor's Entity. Required for vendors */
        entity?: string;
      };
    };
    /** @description Add a bank account to an existing contractor. */
    postApiV1ContractorsContractorIdAccounts: {
      account: {
        /** @description Bank account number */
        account_number: string;
        /** @description Routing number */
        routing_number: string;
        /** @description Bank account's nickname */
        name: string;
        /** @description Account type. `checking` or `savings` */
        account_type: string;
      };
    };
    /** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
    patchApiV1Contractors: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-12345 */
        social_security?: string;
        /** @description Contractor's phone number. Required if address exists. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /** @description Customer assigned ID */
        external_id?: string;
      };
    };
    /** @description Add debit card to contractor */
    postApiV1ContractorsContractorIdCards: {
      card: {
        /** @description Card number */
        card_number: string;
        /** @description Expiration date (yyyymm) */
        exp_date: string;
        /** @description A name for this account */
        name: string;
      };
    };
    /** @description Upload identity document */
    postApiV1ContractorsContractorIdIdentityDocument: {
      identity_document: {
        /** @description The back page of document file (Image or PDF) */
        back: string;
        /** @description The front page of document file (Image or PDF) */
        front: string;
        /**
         * @description The document type. Can be passport or driver_license
         * @enum {string}
         */
        subtype: 'driver_license' | 'passport';
      };
    };
    TransactionEntity: {
      /**
       * Format: int32
       * @description The transaction's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * Format: float
       * @description The amount of incoming transaction
       * @example 9912.23
       */
      incoming?: number;
      /**
       * Format: float
       * @description The amount of outgoing transaction
       * @example 12315.25
       */
      outgoing?: number;
      /**
       * @description The current status of the transaction
       * @example Settled
       */
      status?: string;
      /**
       * @description Description of transaction
       * @example Payment to Contractor One
       */
      description?: string;
      /**
       * Format: date-time
       * @description When the transaction was created
       * @example 2023-01-04T00:04:08.128Z
       */
      created_at?: string;
    };
    /** @description TransferTransactionEntity model */
    TransferTransactionEntity: {
      /**
       * Format: int32
       * @description The transfer's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * @description Fund or Withdraw
       * @example fund
       */
      direction?: string;
      /**
       * Format: float
       * @description The amount of the transfer
       * @example 10.99
       */
      amount?: number;
      /**
       * @description The current status of the transfer
       * @example SETTLED
       */
      status?: string;
      /**
       * Format: date-time
       * @description When the transfer was created
       * @example 2023-01-04T00:04:07.910Z
       */
      created_at?: string;
    };
    /** @description LineItemEntity model */
    LineItemEntity: {
      /**
       * Format: int32
       * @description The line_item's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * Format: float
       * @description The amount of the line item in dollars
       * @example 10.99
       */
      amount?: number;
      /**
       * @description The user-supplied note for this line item
       * @example Payment for 10/30/21
       */
      reason?: string;
      /**
       * @description Whether this line item represents a reimbursement for a contractor's expense
       * @example false
       */
      reimbursement?: boolean;
      /**
       * @description Optional customer-supplied association with a job
       * @example abc123
       */
      job_id?: string;
      /**
       * @description Optional customer-supplied unique identifier for this line item
       * @example def456
       */
      external_id?: string;
      /**
       * @description Line item metadata
       * @example {"YTD payments": 100}
       */
      metadata?: string;
    };
    /** @description Ten99Entity model */
    Ten99Entity: {
      /**
       * Format: int32
       * @description The 1099's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * Format: int32
       * @description The ID of the contractor the 1099 was issued for
       * @example 123
       */
      contractor_id?: number;
      /**
       * Format: int32
       * @description The tax year covered by this 1099
       * @example 2020
       */
      year?: number;
      /**
       * @description The status of the 1099
       * @example submitted
       */
      status?: string;
      /**
       * @description The 1099 subtype
       * @example Ten99Nec
       */
      type?: string;
      /**
       * @description Validation errors
       * @example First name is missing
       */
      validation_errors?: Record<string, never>[];
      /**
       * @description Account Number
       * @example abc123
       */
      account_number?: string;
      /**
       * Format: int32
       * @description Id of a 1099 corrected by this one
       * @example 234
       */
      corrected?: number;
      /**
       * Format: int32
       * @description Id of this 1099's correction, if it has one
       * @example 987
       */
      correction?: number;
      second_tin?: string;
      box1?: string;
      box2?: string;
      box4?: string;
      box5a?: string;
      box5b?: string;
      box6a?: string;
      box6b?: string;
      box7a?: string;
      box7b?: string;
      box1a?: string;
      box1b?: string;
      box3?: string;
      box5c?: string;
      box5d?: string;
      box5e?: string;
      box5f?: string;
      box5g?: string;
      box5h?: string;
      box5i?: string;
      box5j?: string;
      box5k?: string;
      box5l?: string;
      box8a?: string;
      box8b?: string;
      box5?: string;
      box6?: string;
      box7?: string;
      box8?: string;
      box9?: string;
      box10?: string;
      box11?: string;
      box12?: string;
      box13?: string;
      box14?: string;
      box15a?: string;
      box15b?: string;
      box16aStateNo?: string;
      box16aState?: string;
      box16bStateNo?: string;
      box16bState?: string;
      box17a?: string;
      box17b?: string;
    };
    /** @description WebhookSubscriptionEntity model */
    WebhookSubscriptionEntity: {
      /**
       * Format: date-time
       * @description When the subscription was created
       * @example 2023-01-04T00:04:08.062Z
       */
      created_at?: string;
      /**
       * @description Webhook type
       * @example emitted
       */
      webhook_type?: string;
      /**
       * @description URL to deliver webhooks to
       * @example https://example.org/hook
       */
      url?: string;
      /**
       * Format: date-time
       * @description When the subscription was deactivated
       * @example 2023-01-04T00:04:08.062Z
       */
      deactivated_at?: string;
      /**
       * Format: int32
       * @description The subscription's unique identifier
       * @example 123
       */
      id?: number;
    };
    /** @description Update a line item's metadata. */
    putApiV1LineItems: {
      line_item: {
        metadata?: Record<string, never>;
      };
    };
    /** @description PaymentEntity model */
    PaymentEntity: {
      /**
       * Format: int32
       * @description The payments's unique identifier
       * @example 424542
       */
      id?: number;
      /**
       * Format: float
       * @description The total payment amount excluding fees
       * @example 409.4
       */
      amount?: number;
      line_items?: components['schemas']['LineItemEntity'][];
      /**
       * Format: int32
       * @example 21488
       */
      contractor_id?: number;
      contractor?: components['schemas']['ContractorEntity'];
      /**
       * Format: date-time
       * @description When the payment was created
       * @example 2022-12-04T00:04:07.726Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description When the payment was completed, if applicable. This is an estimation provided by the receiving bank.
       * @example 2022-12-07T00:04:07.726Z
       */
      completed_at?: string;
      /**
       * @description The current status of the payment
       * @example pending
       */
      status?: string;
      /**
       * @description Optional customer-supplied unique identifier for this payment
       * @example abc123
       */
      external_id?: string;
      /**
       * @description Payment metadata JSON
       * @example {"contact_phone_number": "222-333-4444"}
       */
      metadata?: string;
      /**
       * Format: float
       * @description The total fee charged to sender
       * @example 0.49
       */
      sender_fee?: number;
      /**
       * Format: float
       * @description The total fee charged to recipient
       * @example 0.5
       */
      recipient_fee?: number;
      /**
       * Format: float
       * @description The amount deposited, after fees
       * @example 408.9
       */
      net_deposit_amount?: number;
    };
    /** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
    patchApiV1BusinessesBusinessIdContractors: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-12345 */
        social_security?: string;
        /** @description Contractor's phone number. Required if address exists. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /** @description Customer assigned ID */
        external_id?: string;
      };
    };
    /** @description Create a new API key. Note: This is the only time you'll get the secret. */
    postApiV1ApiKeys: {
      api_key: {
        /** @description API Key name */
        name?: string;
        /** @description Create a key for simplified sandbox authentication */
        test_key?: boolean;
      };
    };
    /** @description Creates a new contractor. */
    postApiV1Contractors: {
      contractor: {
        /** @description Contractor email address */
        email: string;
        /** @description Contractor's first name */
        first_name: string;
        /** @description Contractor's last name */
        last_name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /**
         * @description Send email invitation when set to TRUE
         * @default false
         */
        send_invite?: boolean;
      };
    };
    /** @description Subscribe to webhooks of the chosen type. Please note that multiple consecutive failures to deliver webhooks will deactivate this subscription, and it will need to be reactivated. See PUT below. */
    postApiV1Subscriptions: {
      subscription: {
        /** @description URL that the webhook will be sent to */
        url: string;
        /** @description Webhook type, can be payment, tin_check, partner_sign_up, 1099 */
        webhook_type: string;
      };
    };
    /** @description Update a payment's metadata. */
    putApiV1Payments: {
      payment: {
        metadata?: Record<string, never>;
      };
    };
    /** @description Change the URL where webhooks are sent. */
    patchApiV1Subscriptions: {
      subscription: {
        /** @description URL that the webhook will be sent to */
        url: string;
      };
    };
    /** @description Creates a new batch of payments. */
    postApiV1Batches: {
      batch: {
        nonce: string;
        notes?: string;
        payments: {
          /** Format: int32 */
          contractor_id: number;
          /**
           * @default null
           * @enum {string}
           */
          debit_card?: true | '' | 'true' | 'false' | '';
          /**
           * @default null
           * @enum {string}
           */
          interchange?: true | '' | 'true' | 'false' | '';
          external_id?: string;
          line_items: {
            /** Format: float */
            amount: number;
            external_id?: string;
            job_id?: string;
            metadata?: Record<string, never>;
            /** @default false */
            reimbursement?: boolean;
            reason?: string;
          }[];
          metadata?: Record<string, never>;
        }[];
      };
    };
    /** @description W9Entity model */
    W9Entity: {
      /**
       * @description First name
       * @example John
       */
      first_name?: string;
      /**
       * @description Last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description Email
       * @example entity@example.com
       */
      email?: string;
      /**
       * @description Social security number.
       * @example 111-22-3333
       */
      social_security?: string;
      /**
       * @description Phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * Format: date
       * @description Birthdate
       * @example 12/31/1990
       */
      birthdate?: string;
      /**
       * @description 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description City
       * @example New York
       */
      city?: string;
      /**
       * @description State
       * @example NY
       */
      state?: string;
      /**
       * @description Zip code
       * @example 10010
       */
      zip?: string;
      /**
       * @description Federal tax classification
       * @example single_member_llc
       */
      tax_classification?: string;
      /**
       * @description Tax classification for LLC
       * @example C
       */
      llc_classification?: string;
      /**
       * @description Other Classification for LLC
       * @example Sole Proprietor
       */
      other_classification?: string;
      /**
       * @description Vendor business name
       * @example Business Company Enterprises
       */
      business_name?: string;
      /**
       * @description Vendor's EIN
       * @example 11-222222
       */
      ein?: string;
      /**
       * @description Vendor's DBA
       * @example BCE
       */
      dba?: string;
      /**
       * Format: int32
       * @description Exempt payee code
       * @example 5
       */
      exempt_payee_code?: number;
      /**
       * @description Exemption from FACTA reporting code
       * @example E
       */
      fatca_reporting_exemption_code?: string;
      /**
       * @description Results of instant TIN check
       * @example pending
       */
      tin_check_status?: string;
      /**
       * @description Reason for TIN check results if applicable
       * @example TIN and Name combination does not match IRS record
       */
      tin_check_reason?: string;
      /**
       * @description Vendor or regular contractor?
       * @example true
       */
      vendor?: boolean;
      /**
       * @description Contractor prefers to receive a paper 1099
       * @example true
       */
      paper_1099?: boolean;
    };
    /** @description SubaccountEntity model */
    SubaccountEntity: {
      /**
       * Format: double
       * @description The subaccount available balance
       * @example 85
       */
      available_balance?: number;
      /**
       * Format: double
       * @description The subaccount current balance
       * @example 100
       */
      current_balance?: number;
    };
    /** @description Create a 1099 for a contractor. */
    postApiV11099s: {
      1099: {
        /** @description Box 1 (decimal) - Type NEC only */
        box1?: string;
        /** @description Box 1a (decimal) - Type K only */
        box1a?: string;
        /** @description Box 1b (decimal) - Type K only */
        box1b?: string;
        /** @description Box 2 (boolean for NEC, string for K) */
        box2?: boolean;
        /** Format: int32 */
        contractor_id: number;
        /** @enum {string} */
        type: 'K' | 'NEC' | 'MISC';
        /** @description Box 3 (decimal) - Type K only */
        box3?: string;
        /** @description Box 4 (decimal) */
        box4?: string;
        /** @description Box 5a (decimal) */
        box5a?: string;
        /** @description Box 5b (decimal) */
        box5b?: string;
        /** @description Box 5c (decimal) - Type K only */
        box5c?: string;
        /** @description Box 5d (decimal) - Type K only */
        box5d?: string;
        /** @description Box 5e (decimal) - Type K only */
        box5e?: string;
        /** @description Box 5f (decimal) - Type K only */
        box5f?: string;
        /** @description Box 5g (decimal) - Type K only */
        box5g?: string;
        /** @description Box 5h (decimal) - Type K only */
        box5h?: string;
        /** @description Box 5i (decimal) - Type K only */
        box5i?: string;
        /** @description Box 5j (decimal) - Type K only */
        box5j?: string;
        /** @description Box 5k (decimal) - Type K only */
        box5k?: string;
        /** @description Box 5l (decimal) - Type K only */
        box5l?: string;
        /** @description Box 6a (string) */
        box6a?: string;
        /** @description Box 6b (string) */
        box6b?: string;
        /** @description Box 7a (decimal) - Type NEC only */
        box7a?: string;
        /** @description Box 7b (decimal) - Type NEC only */
        box7b?: string;
        /** @description Box 8a (decimal) - Type K only */
        box8a?: string;
        /** @description Box 8b (decimal) - Type K only */
        box8b?: string;
      };
    };
    /** @description Update a 1099 */
    patchApiV11099s: {
      1099: {
        /** @description Box 1a (decimal) - Type K only */
        box1a?: string;
        /** @description Box 1b (decimal) - Type K only */
        box1b?: string;
        /** @description Box 2 (boolean) - Type NEC only */
        box2?: boolean;
        /** @description Box 3 (decimal) - Type K only */
        box3?: string;
        /** Format: int32 */
        contractor_id: number;
        /** @enum {string} */
        type: 'K' | 'NEC';
        /** @description Box 4 (decimal) */
        box4?: string;
        /** @description Box 5a (decimal) */
        box5a?: string;
        /** @description Box 5b (decimal) */
        box5b?: string;
        /** @description Box 5c (decimal) - Type K only */
        box5c?: string;
        /** @description Box 5d (decimal) - Type K only */
        box5d?: string;
        /** @description Box 5e (decimal) - Type K only */
        box5e?: string;
        /** @description Box 5f (decimal) - Type K only */
        box5f?: string;
        /** @description Box 5g (decimal) - Type K only */
        box5g?: string;
        /** @description Box 5h (decimal) - Type K only */
        box5h?: string;
        /** @description Box 5i (decimal) - Type K only */
        box5i?: string;
        /** @description Box 5j (decimal) - Type K only */
        box5j?: string;
        /** @description Box 5k (decimal) - Type K only */
        box5k?: string;
        /** @description Box 5l (decimal) - Type K only */
        box5l?: string;
        /** @description Box 6a (string) */
        box6a?: string;
        /** @description Box 6b (string) */
        box6b?: string;
        /** @description Box 7a (decimal) - Type NEC only */
        box7a?: string;
        /** @description Box 7b (decimal) - Type NEC only */
        box7b?: string;
        /** @description Box 8a (decimal) - Type K only */
        box8a?: string;
        /** @description Box 8b (decimal) - Type K only */
        box8b?: string;
      };
    };
    /** @description Create a 1099 for a contractor. */
    postApiV1BusinessesBusinessId1099s: {
      1099: {
        /** @description Box 1 (decimal) - Type NEC only */
        box1?: string;
        /** @description Box 1a (decimal) - Type K only */
        box1a?: string;
        /** @description Box 1b (decimal) - Type K only */
        box1b?: string;
        /** @description Box 2 (boolean for NEC, string for K) */
        box2?: boolean;
        /** Format: int32 */
        contractor_id: number;
        /** @enum {string} */
        type: 'K' | 'NEC' | 'MISC';
        /** @description Box 3 (decimal) - Type K only */
        box3?: string;
        /** @description Box 4 (decimal) */
        box4?: string;
        /** @description Box 5a (decimal) */
        box5a?: string;
        /** @description Box 5b (decimal) */
        box5b?: string;
        /** @description Box 5c (decimal) - Type K only */
        box5c?: string;
        /** @description Box 5d (decimal) - Type K only */
        box5d?: string;
        /** @description Box 5e (decimal) - Type K only */
        box5e?: string;
        /** @description Box 5f (decimal) - Type K only */
        box5f?: string;
        /** @description Box 5g (decimal) - Type K only */
        box5g?: string;
        /** @description Box 5h (decimal) - Type K only */
        box5h?: string;
        /** @description Box 5i (decimal) - Type K only */
        box5i?: string;
        /** @description Box 5j (decimal) - Type K only */
        box5j?: string;
        /** @description Box 5k (decimal) - Type K only */
        box5k?: string;
        /** @description Box 5l (decimal) - Type K only */
        box5l?: string;
        /** @description Box 6a (string) */
        box6a?: string;
        /** @description Box 6b (string) */
        box6b?: string;
        /** @description Box 7a (decimal) - Type NEC only */
        box7a?: string;
        /** @description Box 7b (decimal) - Type NEC only */
        box7b?: string;
        /** @description Box 8a (decimal) - Type K only */
        box8a?: string;
        /** @description Box 8b (decimal) - Type K only */
        box8b?: string;
      };
    };
    /** @description LedgerEntity model */
    LedgerEntity: {
      /**
       * Format: float
       * @description Available balance
       * @example 124510.99
       */
      available_balance?: number;
      /**
       * Format: float
       * @description Current balance
       * @example 132125.2
       */
      current_balance?: number;
      transactions?: components['schemas']['TransactionEntity'][];
    };
    /** @description Creates a new batch of payments. */
    postApiV1BusinessesBusinessIdBatches: {
      batch: {
        nonce: string;
        notes?: string;
        payments: {
          /** Format: int32 */
          contractor_id: number;
          /**
           * @default null
           * @enum {string}
           */
          debit_card?: true | '' | 'true' | 'false' | '';
          external_id?: string;
          /**
           * @default null
           * @enum {string}
           */
          interchange?: true | '' | 'true' | 'false' | '';
          line_items: {
            /** Format: float */
            amount: number;
            external_id?: string;
            job_id?: string;
            metadata?: Record<string, never>;
            reason?: string;
            /** @default false */
            reimbursement?: boolean;
          }[];
          metadata?: Record<string, never>;
        }[];
      };
    };
    /** @description Creates a new contractor. */
    postApiV1BusinessesBusinessIdContractors: {
      contractor: {
        /** @description Contractor email address */
        email: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Contractor's last name */
        last_name: string;
        /** @description Contractor's first name */
        first_name: string;
        /**
         * @description Send email invitation when set to TRUE
         * @default false
         */
        send_invite?: boolean;
      };
    };
    /** @description Add a bank account to an existing contractor. */
    postApiV1BusinessesBusinessIdContractorsContractorIdAccounts: {
      account: {
        /** @description Bank account number */
        account_number: string;
        /** @description Routing number */
        routing_number: string;
        /** @description Bank account's nickname */
        name: string;
        /** @description Account type. `checking` or `savings` */
        account_type: string;
      };
    };
    /** @description Updates an existing customer */
    patchApiV1Customers: {
      customer: {
        /** @description Customer email address */
        email?: string;
        /** @description Customer's full name */
        name?: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /** @description Customer's account number. Example: 1231231234 */
        account_number?: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number?: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type?: 'checking' | 'savings';
        /** @description The authorization document file (Image or PDF) */
        authorization?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
      };
    };
    /** @description Creates a new Accounts Receivable Payment. */
    postApiV1ArPayments: {
      ar_payment: {
        /** Format: int32 */
        customer_id: number;
        /** Format: float */
        amount: number;
        reason?: string;
        nonce: string;
      };
    };
    /** @description RecordError model */
    RecordError: {
      /**
       * @description Summary error messages
       * @example Required field is missing
       */
      error?: string;
      /** @description Detail per error */
      messages?: string[];
    };
    /** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
    postApiV1BusinessesBusinessIdContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Allow skip TIN check when nine zeros are passed - '0000000000'
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Create a transfer transaction. */
    postApiV1Transfers: {
      transfer: {
        /** Format: double */
        amount: number;
        /** @enum {string} */
        direction: 'fund' | 'withdraw';
        nonce: string;
      };
    };
    /** @description Update W9 information for a contractor. */
    patchApiV1BusinessesBusinessIdContractorsIdW9: {
      contractor: {
        /** @description Line address 1 */
        address1?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        first_name?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification?:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description True when contractor is vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Allow skip TIN check when nine zeros are passed - '0000000000'
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Create a transfer transaction. */
    postApiV1BusinessesBusinessIdTransfers: {
      transfer: {
        /** Format: double */
        amount: number;
        /** @enum {string} */
        direction: 'fund' | 'withdraw';
        nonce: string;
      };
    };
    /** @description Submit KYC (know your customer) information for a contractor */
    postApiV1BusinessesBusinessIdContractorsIdKyc: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234. Required for non-vendors */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /** @description Update contractor with KYC details and become a Vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's formation date. Required for vendors */
        business_formed_on?: string;
        /** @description Vendor's Industry. Required for vendors */
        industry?: string;
        /** @description Vendor's Entity. Required for vendors */
        entity?: string;
      };
    };
    /** @description Update W9 information for a contractor. */
    patchApiV1ContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification?:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description True when contractor is vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Allow skip TIN check when nine zeros are passed - '0000000000'
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Add debit card to contractor */
    postApiV1BusinessesBusinessIdContractorsContractorIdCards: {
      card: {
        /** @description Card number */
        card_number: string;
        /** @description Expiration date (yyyymm) */
        exp_date: string;
        /** @description A name for this account */
        name: string;
      };
    };
    /** @description Upload identity document */
    postApiV1BusinessesBusinessIdContractorsContractorIdIdentityDocument: {
      identity_document: {
        /** @description The back page of document file (Image or PDF) */
        back: string;
        /** @description The front page of document file (Image or PDF) */
        front: string;
        /**
         * @description The document type. Can be passport or driver_license
         * @enum {string}
         */
        subtype: 'driver_license' | 'passport';
      };
    };
    /** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
    postApiV1BusinessesBusinessIdPayments: {
      payment: {
        /** Format: int32 */
        contractor_id: number;
        /**
         * @default null
         * @enum {string}
         */
        debit_card?: true | '' | 'true' | 'false' | '';
        external_id?: string;
        /**
         * @default null
         * @enum {string}
         */
        interchange?: true | '' | 'true' | 'false' | '';
        line_items: {
          /** Format: float */
          amount: number;
          external_id?: string;
          job_id?: string;
          metadata?: Record<string, never>;
          reason?: string;
          /** @default false */
          reimbursement?: boolean;
        }[];
        metadata?: Record<string, never>;
        nonce: string;
      };
    };
    /** @description Update a payment's metadata. */
    putApiV1BusinessesBusinessIdPayments: {
      payment: {
        metadata?: Record<string, never>;
      };
    };
    /** @description Creates a new customer. */
    postApiV1Customers: {
      customer: {
        /** @description Customer's account number. Example: 1231231234 */
        account_number: string;
        /** @description Customer's full name */
        name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /** @description Customer email address */
        email: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type: 'checking' | 'savings';
        /** @description The authorization document file (Image or PDF) */
        authorization: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /** @description Zip code */
        zip: string;
      };
    };
    /** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
    postApiV1Payments: {
      payment: {
        /** Format: int32 */
        contractor_id: number;
        /**
         * @default null
         * @enum {string}
         */
        debit_card?: true | '' | 'true' | 'false' | '';
        external_id?: string;
        /**
         * @default null
         * @enum {string}
         */
        interchange?: true | '' | 'true' | 'false' | '';
        line_items: {
          /** Format: float */
          amount: number;
          external_id?: string;
          job_id?: string;
          metadata?: Record<string, never>;
          reason?: string;
          /** @default false */
          reimbursement?: boolean;
        }[];
        metadata?: Record<string, never>;
        nonce: string;
      };
    };
    /** @description Update a line item's metadata. */
    putApiV1BusinessesBusinessIdLineItems: {
      line_item: {
        metadata?: Record<string, never>;
      };
    };
    /** @description WebhookEntity model */
    WebhookEntity: {
      /**
       * Format: int32
       * @description The webhook's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * Format: int32
       * @description The object's unique identifier
       * @example 234
       */
      object_id?: number;
      /**
       * @description The object's type
       * @example ACH-US
       */
      object_type?: string;
      /**
       * @description Data / payload sent to the subscription URL
       * @example {"some_data": "some_value"}
       */
      payload?: string;
      /**
       * Format: date-time
       * @description When the webhook was sent
       * @example 2023-01-04T00:04:08.119Z
       */
      sent_at?: string;
      /**
       * @description URL the webhook was sent to
       * @example https://example.org/webhook
       */
      url?: string;
    };
    /** @description Update a 1099 */
    patchApiV1BusinessesBusinessId1099s: {
      1099: {
        /** @description Box 1a (decimal) - Type K only */
        box1a?: string;
        /** @description Box 1b (decimal) - Type K only */
        box1b?: string;
        /** @description Box 2 (boolean) - Type NEC only */
        box2?: boolean;
        /** @description Box 3 (decimal) - Type K only */
        box3?: string;
        /** @description Box 4 (decimal) */
        box4?: string;
        /** @description Box 5a (decimal) */
        box5a?: string;
        /** @description Box 5b (decimal) */
        box5b?: string;
        /** @description Box 5c (decimal) - Type K only */
        box5c?: string;
        /** Format: int32 */
        contractor_id: number;
        /** @enum {string} */
        type: 'K' | 'NEC';
        /** @description Box 5d (decimal) - Type K only */
        box5d?: string;
        /** @description Box 5e (decimal) - Type K only */
        box5e?: string;
        /** @description Box 5f (decimal) - Type K only */
        box5f?: string;
        /** @description Box 5g (decimal) - Type K only */
        box5g?: string;
        /** @description Box 5h (decimal) - Type K only */
        box5h?: string;
        /** @description Box 5i (decimal) - Type K only */
        box5i?: string;
        /** @description Box 5j (decimal) - Type K only */
        box5j?: string;
        /** @description Box 5k (decimal) - Type K only */
        box5k?: string;
        /** @description Box 5l (decimal) - Type K only */
        box5l?: string;
        /** @description Box 6a (string) */
        box6a?: string;
        /** @description Box 6b (string) */
        box6b?: string;
        /** @description Box 7a (decimal) - Type NEC only */
        box7a?: string;
        /** @description Box 7b (decimal) - Type NEC only */
        box7b?: string;
        /** @description Box 8a (decimal) - Type K only */
        box8a?: string;
        /** @description Box 8b (decimal) - Type K only */
        box8b?: string;
      };
    };
    /** @description Creates a new customer. */
    postApiV1BusinessesBusinessIdCustomers: {
      customer: {
        /** @description Customer's account number. Example: 1231231234 */
        account_number: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type: 'checking' | 'savings';
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description The authorization document file (Image or PDF) */
        authorization: string;
        /** @description City */
        city: string;
        /** @description Customer email address */
        email: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's full name */
        name: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /** @description Zip code */
        zip: string;
      };
    };
    /** @description Updates an existing customer */
    patchApiV1BusinessesBusinessIdCustomers: {
      customer: {
        /** @description Customer's account number. Example: 1231231234 */
        account_number?: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type?: 'checking' | 'savings';
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description The authorization document file (Image or PDF) */
        authorization?: string;
        /** @description City */
        city?: string;
        /** @description Customer email address */
        email?: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's full name */
        name?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /** @description Zip code */
        zip?: string;
      };
    };
    /** @description Creates a new Accounts Receivable Payment. */
    postApiV1BusinessesBusinessIdArPayments: {
      ar_payment: {
        /** Format: float */
        amount: number;
        /** Format: int32 */
        customer_id: number;
        nonce: string;
        reason?: string;
      };
    };
  };
}

export type external = Record<string, never>;

export interface operations {
  deleteApiV11099sId: {
    /**
     * Delete 1099
     * @description Delete a 1099.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Delete a 1099. */
      204: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  deleteApiV1ApiKeysId: {
    /**
     * Revoke API key
     * @description Revoke an API key. Note: The API key currently in use cannot be revoked.
     */
    parameters: {
      /** @description API Key */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Revoke an API key. Note: The API key currently in use cannot be revoked. */
      204: {
        content: {
          'application/json': components['schemas']['ApiKeyEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      402: never;
    };
  };
  deleteApiV1BusinessesBusinessId1099sId: {
    /**
     * Delete 1099
     * @description Delete a 1099.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Delete a 1099. */
      204: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  deleteApiV1BusinessesBusinessIdContractorsContractorIdAccountsId: {
    /**
     * Deactivate account
     * @description Deactivate contractor's bank account.
     */
    parameters: {
      /** @description Account ID */
      path: {
        business_id: number;
        contractor_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Deactivate contractor's bank account. */
      204: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  deleteApiV1BusinessesBusinessIdContractorsId: {
    /**
     * Delete a contractor
     * @description Delete contractor record. Note: You can only destroy new contractors that aren't associated with other businesses or that have payments or 1099s
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Delete contractor record. Note: You can only destroy new contractors that aren't associated with other businesses or that have payments or 1099s */
      204: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  deleteApiV1BusinessesBusinessIdCustomersId: {
    /**
     * Delete a customer
     * @description Delete customer record. Note: You can only destroy customer that not associated with any Accounts Receivable Payments
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Delete customer record. Note: You can only destroy customer that not associated with any Accounts Receivable Payments */
      204: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  deleteApiV1BusinessesBusinessIdPaymentsId: {
    /**
     * Delete payment
     * @description Attempts to cancel a payment. Once the debit from the payer's account has been finalized cancelling is not possible.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Attempts to cancel a payment. Once the debit from the payer's account has been finalized cancelling is not possible. */
      204: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  deleteApiV1BusinessesBusinessIdTransfersId: {
    /**
     * Delete transfer
     * @description Attempt to cancel a transfer.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Attempt to cancel a transfer. */
      204: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  deleteApiV1ContractorsContractorIdAccountsId: {
    /**
     * Deactivate account
     * @description Deactivate contractor's bank account.
     */
    parameters: {
      /** @description Account ID */
      path: {
        contractor_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Deactivate contractor's bank account. */
      204: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  deleteApiV1ContractorsId: {
    /**
     * Delete a contractor
     * @description Delete contractor record. Note: You can only destroy new contractors that aren't associated with other businesses or that have payments or 1099s
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Delete contractor record. Note: You can only destroy new contractors that aren't associated with other businesses or that have payments or 1099s */
      204: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  deleteApiV1CustomersId: {
    /**
     * Delete a customer
     * @description Delete customer record. Note: You can only destroy customer that not associated with any Accounts Receivable Payments
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Delete customer record. Note: You can only destroy customer that not associated with any Accounts Receivable Payments */
      204: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  patchApiV1ContractorsIdW9: {
    /**
     * Update W-9 information
     * @description Update W9 information for a contractor.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1ContractorsIdW9'];
      };
    };
    responses: {
      /** @description Update W9 information for a contractor. */
      200: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV1ContractorsIdKyc: {
    /**
     * Submit KYC information
     * @description Submit KYC (know your customer) information for a contractor
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ContractorsIdKyc'];
      };
    };
    responses: {
      /** @description Submit KYC (know your customer) information for a contractor */
      201: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV1ContractorsIdInvite: {
    /**
     * Send invite to contractor
     * @description Delivers a secure onboarding email invitation to an existing contractor who has never been paid. If the contractor has an outstanding unaccepted invitation, the old invitation will be invalidated.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Delivers a secure onboarding email invitation to an existing contractor who has never been paid. If the contractor has an outstanding unaccepted invitation, the old invitation will be invalidated. */
      201: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1ContractorsContractorIdAccounts: {
    /**
     * List contractor accounts
     * @description List all accounts for the contractor.
     */
    parameters: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
      path: {
        contractor_id: number;
      };
    };
    responses: {
      /** @description List all accounts for the contractor. */
      200: {
        content: {
          'application/json': components['schemas']['AccountEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1ContractorsContractorIdAccounts: {
    /**
     * Add account to contractor
     * @description Add a bank account to an existing contractor.
     */
    parameters: {
      path: {
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ContractorsContractorIdAccounts'];
      };
    };
    responses: {
      /** @description Add a bank account to an existing contractor. */
      201: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1ContractorsContractorIdAccountsId: {
    /**
     * Get account detail
     * @description Get details of an existing bank account.
     */
    parameters: {
      /** @description Account ID */
      path: {
        id: number;
        contractor_id: number;
      };
    };
    responses: {
      /** @description Get details of an existing bank account. */
      200: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1ContractorsIdTinCheck: {
    /**
     * Create a TIN check
     * @description Verify a contractor's TIN is valid. Note: TIN checks are automatically run on POST and PATCH W9 endpoints
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Verify a contractor's TIN is valid. Note: TIN checks are automatically run on POST and PATCH W9 endpoints */
      201: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV1ContractorsContractorIdCards: {
    /**
     * Add contractor debit card
     * @description Add debit card to contractor
     */
    parameters: {
      path: {
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ContractorsContractorIdCards'];
      };
    };
    responses: {
      /** @description Add debit card to contractor */
      201: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1ApiKeysId: {
    /**
     * Show API key
     * @description Get details of an existing API key.
     */
    parameters: {
      /** @description API Key */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get details of an existing API key. */
      200: {
        content: {
          'application/json': components['schemas']['ApiKeyEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      402: never;
    };
  };
  getApiV1Payments: {
    /**
     * List sent payments
     * @description Returns a list of payments, sorted newest first.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      /** @description Filter results by contractor_id */
      /** @description Include associated object. for example `includes=contractor` */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
        contractor_id?: string;
        includes?: string;
      };
    };
    responses: {
      /** @description Returns a list of payments, sorted newest first. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1Payments: {
    /**
     * Send payment
     * @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1Payments'];
      };
    };
    responses: {
      /** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
      201: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1PaymentsIdRetry: {
    /**
     * Retry payment
     * @description Retry a canceled or returned payment.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Retry a canceled or returned payment. */
      201: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
    };
  };
  getApiV1PaymentsId: {
    /**
     * Show payment
     * @description Returns the details for a single payment, including an array of line item details and the id of the contractor associated with the payment.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for a single payment, including an array of line item details and the id of the contractor associated with the payment. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
    };
  };
  putApiV1PaymentsId: {
    /**
     * Update payment
     * @description Update a payment's metadata.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['putApiV1Payments'];
      };
    };
    responses: {
      /** @description Update a payment's metadata. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
    };
  };
  deleteApiV1PaymentsId: {
    /**
     * Delete payment
     * @description Attempts to cancel a payment. Once the debit from the payer's account has been finalized cancelling is not possible.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Attempts to cancel a payment. Once the debit from the payer's account has been finalized cancelling is not possible. */
      204: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  putApiV1LineItemsId: {
    /**
     * Update line item
     * @description Update a line item's metadata.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['putApiV1LineItems'];
      };
    };
    responses: {
      /** @description Update a line item's metadata. */
      200: {
        content: {
          'application/json': components['schemas']['LineItemEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Line item not found */
      404: never;
    };
  };
  getApiV1Transfers: {
    /**
     * List transfers
     * @description Get a list of all transfers.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Get a list of all transfers. */
      200: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1Transfers: {
    /**
     * Create transfer
     * @description Create a transfer transaction.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1Transfers'];
      };
    };
    responses: {
      /** @description Create a transfer transaction. */
      201: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1TransfersId: {
    /**
     * Show transfer
     * @description Get details of an existing transfer.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Get details of an existing transfer. */
      200: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  deleteApiV1TransfersId: {
    /**
     * Delete transfer
     * @description Attempt to cancel a transfer.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Attempt to cancel a transfer. */
      204: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1ApiKeys: {
    /**
     * List API keys
     * @description Get a list of all API keys.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Get a list of all API keys. */
      200: {
        content: {
          'application/json': components['schemas']['ApiKeyEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1ApiKeys: {
    /**
     * Create API key
     * @description Create a new API key. Note: This is the only time you'll get the secret.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ApiKeys'];
      };
    };
    responses: {
      /** @description Create a new API key. Note: This is the only time you'll get the secret. */
      201: {
        content: {
          'application/json': components['schemas']['ApiKeyEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1ContractorsContractorIdIdentityDocument: {
    /**
     * Create contractor's identity document
     * @description Upload identity document
     */
    parameters: {
      path: {
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ContractorsContractorIdIdentityDocument'];
      };
    };
    responses: {
      /** @description Upload identity document */
      201: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV1BusinessesBusinessIdBatchesIdPayments: {
    /**
     * Show batch payments
     * @description Returns the payments from a single batch.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description Returns the payments from a single batch. */
      200: {
        content: {
          'application/json': components['schemas']['BatchEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdContractors: {
    /**
     * List contractors
     * @description List contractors.
     */
    parameters: {
      /** @description Search query to find contractors */
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        q?: string;
        page?: number;
        per_page?: number;
        offset?: number;
      };
      path: {
        business_id: number;
      };
    };
    responses: {
      /** @description List contractors. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1Subscriptions: {
    /**
     * Create subscription
     * @description Subscribe to webhooks of the chosen type. Please note that multiple consecutive failures to deliver webhooks will deactivate this subscription, and it will need to be reactivated. See PUT below.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1Subscriptions'];
      };
    };
    responses: {
      /** @description Subscribe to webhooks of the chosen type. Please note that multiple consecutive failures to deliver webhooks will deactivate this subscription, and it will need to be reactivated. See PUT below. */
      201: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1SubscriptionsId: {
    /**
     * Show subscription
     * @description Get the details of a subscription.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Get the details of a subscription. */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  putApiV1SubscriptionsId: {
    /**
     * Reactivate subscription
     * @description Reactivate an inactive subscription.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Reactivate an inactive subscription. */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  deleteApiV1SubscriptionsId: {
    /**
     * Delete subscription
     * @description Permanently remove a subscription.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Permanently remove a subscription. */
      204: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  patchApiV1SubscriptionsId: {
    /**
     * Update subscription URL
     * @description Change the URL where webhooks are sent.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1Subscriptions'];
      };
    };
    responses: {
      /** @description Change the URL where webhooks are sent. */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  deleteApiV1SubscriptionsIdDeactivate: {
    /**
     * Deactivate subscription
     * @description Deactivate a subscription.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Deactivate a subscription. */
      204: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1Batches: {
    /**
     * List batches
     * @description Returns a list of batches, sorted newest-first.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Returns a list of batches, sorted newest-first. */
      200: {
        content: {
          'application/json': components['schemas']['BatchEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1Batches: {
    /**
     * Create batch
     * @description Creates a new batch of payments.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1Batches'];
      };
    };
    responses: {
      /** @description Creates a new batch of payments. */
      201: {
        content: {
          'application/json': components['schemas']['BatchEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BatchesIdPayments: {
    /**
     * Show batch payments
     * @description Returns the payments from a single batch.
     */
    parameters: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the payments from a single batch. */
      200: {
        content: {
          'application/json': components['schemas']['BatchEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BatchesId: {
    /**
     * Show batch
     * @description Returns the details of a single batch.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the details of a single batch. */
      200: {
        content: {
          'application/json': components['schemas']['BatchEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1Balance: {
    /**
     * Show balance
     * @description Returns the current and available balance for the account.
     */
    responses: {
      /** @description Returns the current and available balance for the account. */
      200: {
        content: {
          'application/json': components['schemas']['SubaccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV11099s: {
    /**
     * List 1099s
     * @description Returns a list of 1099s, sorted newest-first.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Returns a list of 1099s, sorted newest-first. */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV11099s: {
    /**
     * Create 1099
     * @description Create a 1099 for a contractor.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV11099s'];
      };
    };
    responses: {
      /** @description Create a 1099 for a contractor. */
      201: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV11099sId: {
    /**
     * Show 1099
     * @description Get details of a 1099.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Get details of a 1099. */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1ContractorsFindBy: {
    /**
     * Find contractor uniquely
     * @description Find a contractor by email, external_id or id.
     */
    parameters?: {
      /** @description Contractor email address */
      /** @description Customer assigned ID */
      /** @description Contractor ID */
      query?: {
        email?: string;
        external_id?: string;
        id?: string;
      };
    };
    responses: {
      /** @description Find a contractor by email, external_id or id. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  patchApiV11099sId: {
    /**
     * Update 1099
     * @description Update a 1099
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV11099s'];
      };
    };
    responses: {
      /** @description Update a 1099 */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV11099sIdRetrieve: {
    /**
     * Get 1099 PDF URL
     * @description Returns the URL to a PDF of a submitted 1099. The URL expires in 1 hour.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the URL to a PDF of a submitted 1099. The URL expires in 1 hour. */
      200: never;
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV11099sIdSubmit: {
    /**
     * Submit 1099 to IRS
     * @description Submit 1099 to the IRS.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Submit 1099 to the IRS. */
      201: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1BusinessesBusinessIdContractorsIdW9: {
    /**
     * Submit W-9 information
     * @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint
     */
    parameters: {
      path: {
        id: number;
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdContractorsIdW9'];
      };
    };
    responses: {
      /** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
      201: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1Webhooks: {
    /**
     * List webhooks
     * @description List all webhooks
     */
    parameters?: {
      /** @description Show webhooks only for the specified contractor */
      /** @description Show webhooks only for the specified 1099 */
      /** @description Show webhooks only for the specified payment */
      /** @description Show webhooks only for the specified TIN check */
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        contractor_id?: number;
        '1099_id'?: number;
        payment_id?: number;
        tin_check_id?: number;
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description List all webhooks */
      200: {
        content: {
          'application/json': components['schemas']['WebhookEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Object not found */
      404: never;
    };
  };
  getApiV1WebhooksId: {
    /**
     * Show webhook
     * @description Get webhook details
     */
    parameters: {
      /** @description Show webhook only for the specified contractor */
      /** @description Show webhook only for the specified 1099 */
      /** @description Show webhook only for the specified payment */
      /** @description Show webhook only for the specified TIN check */
      query?: {
        contractor_id?: number;
        '1099_id'?: number;
        payment_id?: number;
        tin_check_id?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Get webhook details */
      200: {
        content: {
          'application/json': components['schemas']['WebhookEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Object not found */
      404: never;
    };
  };
  getApiV1Ledger: {
    /**
     * List transactions
     * @description List transactions.
     */
    parameters?: {
      query?: {
        page?: number;
        size?: number;
      };
    };
    responses: {
      /** @description List transactions. */
      200: {
        content: {
          'application/json': components['schemas']['LedgerEntity'][];
        };
      };
      /** @description Forbidden */
      403: never;
    };
  };
  getApiV1Customers: {
    /**
     * List customers
     * @description List customers.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description List customers. */
      200: {
        content: {
          'application/json': components['schemas']['CustomerEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1Customers: {
    /**
     * Create customer
     * @description Creates a new customer.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1Customers'];
      };
    };
    responses: {
      /** @description Creates a new customer. */
      201: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1CustomersId: {
    /**
     * Return a customer
     * @description Returns the details for a given customer.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for a given customer. */
      200: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV1ContractorsIdW9: {
    /**
     * Submit W-9 information
     * @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ContractorsIdW9'];
      };
    };
    responses: {
      /** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
      201: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  patchApiV1CustomersId: {
    /**
     * Update a customer
     * @description Updates an existing customer
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1Customers'];
      };
    };
    responses: {
      /** @description Updates an existing customer */
      200: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1ArPayments: {
    /**
     * List Accounts Receivable payments
     * @description List Accounts Receivable payments.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        per_page?: number;
        page?: number;
      };
    };
    responses: {
      /** @description List Accounts Receivable payments. */
      200: {
        content: {
          'application/json': components['schemas']['ArPaymentEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1ArPayments: {
    /**
     * Create Accounts Receivable Payment
     * @description Creates a new Accounts Receivable Payment.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1ArPayments'];
      };
    };
    responses: {
      /** @description Creates a new Accounts Receivable Payment. */
      201: {
        content: {
          'application/json': components['schemas']['ArPaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1ArPaymentsId: {
    /**
     * Return an Accounts Receivable Payment
     * @description Returns the details for Accounts Receivable Payment
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for Accounts Receivable Payment */
      200: {
        content: {
          'application/json': components['schemas']['ArPaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdContractorsFindBy: {
    /**
     * Find contractor uniquely
     * @description Find a contractor by email, external_id or id.
     */
    parameters: {
      path: {
        business_id: number;
      };
      /** @description Contractor email address */
      /** @description Customer assigned ID */
      /** @description Contractor ID */
      query?: {
        email?: string;
        external_id?: string;
        id?: string;
      };
    };
    responses: {
      /** @description Find a contractor by email, external_id or id. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  patchApiV1BusinessesBusinessId1099sId: {
    /**
     * Update 1099
     * @description Update a 1099
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1BusinessesBusinessId1099s'];
      };
    };
    responses: {
      /** @description Update a 1099 */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1BusinessesBusinessIdContractors: {
    /**
     * Create contractor
     * @description Creates a new contractor.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdContractors'];
      };
    };
    responses: {
      /** @description Creates a new contractor. */
      201: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  patchApiV1BusinessesBusinessIdContractorsIdW9: {
    /**
     * Update W-9 information
     * @description Update W9 information for a contractor.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1BusinessesBusinessIdContractorsIdW9'];
      };
    };
    responses: {
      /** @description Update W9 information for a contractor. */
      200: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdContractorsId: {
    /**
     * Return a contractor
     * @description Returns the details for a given contractor.
     */
    parameters: {
      /** @description set 1 to return full information of contractor (including Address, phone number, and birthday) */
      /** @description set 1 to return security number of contractor */
      query?: {
        full?: string;
        include_ssn?: string;
      };
      path: {
        id: number;
        business_id: number;
      };
    };
    responses: {
      /** @description Returns the details for a given contractor. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1ContractorsId: {
    /**
     * Return a contractor
     * @description Returns the details for a given contractor.
     */
    parameters: {
      /** @description set 1 to return full information of contractor (including Address, phone number, and birthday) */
      /** @description set 1 to return security number of contractor */
      query?: {
        full?: string;
        include_ssn?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for a given contractor. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  patchApiV1BusinessesBusinessIdContractorsId: {
    /**
     * Update a contractor
     * @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1BusinessesBusinessIdContractors'];
      };
    };
    responses: {
      /** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdContractorsId1099s: {
    /**
     * List all 1099s for a contractor
     * @description List all 1099s for a contractor
     */
    parameters: {
      path: {
        id: number;
        business_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
        year?: string;
      };
    };
    responses: {
      /** @description List all 1099s for a contractor */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdContractorsIdTinCheck: {
    /**
     * Create a TIN check
     * @description Verify a contractor's TIN is valid. Note: TIN checks are automatically run on POST and PATCH W9 endpoints
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Verify a contractor's TIN is valid. Note: TIN checks are automatically run on POST and PATCH W9 endpoints */
      201: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdContractorsIdW9: {
    /**
     * Show W-9 information
     * @description Get W9 information for a contractor.
     */
    parameters: {
      /** @description set true to include social security */
      query?: {
        include_ssn?: string;
      };
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Get W9 information for a contractor. */
      200: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV11099sIdApprove: {
    /**
     * Approve 1099
     * @description Mark 1099 as ready to submit to the IRS.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Mark 1099 as ready to submit to the IRS. */
      201: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1BusinessesBusinessIdContractorsIdInvitations: {
    /**
     * Invite a contractor
     * @description Provides invitation information for the contractor to allow you to send the contractoran onboarding email. If the contractor has an outstanding, unaccepted invitation, the old invitation will be invalidated.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Provides invitation information for the contractor to allow you to send the contractoran onboarding email. If the contractor has an outstanding, unaccepted invitation, the old invitation will be invalidated. */
      201: {
        content: {
          'application/json': components['schemas']['ContractorInvitationEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV1BusinessesBusinessIdContractorsIdKyc: {
    /**
     * Submit KYC information
     * @description Submit KYC (know your customer) information for a contractor
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdContractorsIdKyc'];
      };
    };
    responses: {
      /** @description Submit KYC (know your customer) information for a contractor */
      201: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  patchApiV1ContractorsId: {
    /**
     * Update a contractor
     * @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1Contractors'];
      };
    };
    responses: {
      /** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdContractorsContractorIdAccounts: {
    /**
     * List contractor accounts
     * @description List all accounts for the contractor.
     */
    parameters: {
      path: {
        business_id: number;
        contractor_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description List all accounts for the contractor. */
      200: {
        content: {
          'application/json': components['schemas']['AccountEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdContractorsContractorIdAccounts: {
    /**
     * Add account to contractor
     * @description Add a bank account to an existing contractor.
     */
    parameters: {
      path: {
        business_id: number;
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdContractorsContractorIdAccounts'];
      };
    };
    responses: {
      /** @description Add a bank account to an existing contractor. */
      201: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1BusinessesBusinessId1099sIdApprove: {
    /**
     * Approve 1099
     * @description Mark 1099 as ready to submit to the IRS.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Mark 1099 as ready to submit to the IRS. */
      201: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1ContractorsIdInvitations: {
    /**
     * Invite a contractor
     * @description Provides invitation information for the contractor to allow you to send the contractoran onboarding email. If the contractor has an outstanding, unaccepted invitation, the old invitation will be invalidated.
     */
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Provides invitation information for the contractor to allow you to send the contractoran onboarding email. If the contractor has an outstanding, unaccepted invitation, the old invitation will be invalidated. */
      201: {
        content: {
          'application/json': components['schemas']['ContractorInvitationEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdBatches: {
    /**
     * List batches
     * @description Returns a list of batches, sorted newest-first.
     */
    parameters: {
      path: {
        business_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description Returns a list of batches, sorted newest-first. */
      200: {
        content: {
          'application/json': components['schemas']['BatchEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdContractorsContractorIdIdentityDocument: {
    /**
     * Create contractor's identity document
     * @description Upload identity document
     */
    parameters: {
      path: {
        business_id: number;
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdContractorsContractorIdIdentityDocument'];
      };
    };
    responses: {
      /** @description Upload identity document */
      201: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV1BusinessesBusinessIdPayments: {
    /**
     * List sent payments
     * @description Returns a list of payments, sorted newest first.
     */
    parameters: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      /** @description Filter results by contractor_id */
      /** @description Include associated object. for example `includes=contractor` */
      query?: {
        contractor_id?: string;
        per_page?: number;
        offset?: number;
        page?: number;
        includes?: string;
      };
      path: {
        business_id: number;
      };
    };
    responses: {
      /** @description Returns a list of payments, sorted newest first. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdPayments: {
    /**
     * Send payment
     * @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdPayments'];
      };
    };
    responses: {
      /** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
      201: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1BusinessesBusinessIdContractorsContractorIdCards: {
    /**
     * Add contractor debit card
     * @description Add debit card to contractor
     */
    parameters: {
      path: {
        business_id: number;
        contractor_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdContractorsContractorIdCards'];
      };
    };
    responses: {
      /** @description Add debit card to contractor */
      201: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BusinessesBusinessIdPaymentsId: {
    /**
     * Show payment
     * @description Returns the details for a single payment, including an array of line item details and the id of the contractor associated with the payment.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for a single payment, including an array of line item details and the id of the contractor associated with the payment. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
    };
  };
  putApiV1BusinessesBusinessIdPaymentsId: {
    /**
     * Update payment
     * @description Update a payment's metadata.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['putApiV1BusinessesBusinessIdPayments'];
      };
    };
    responses: {
      /** @description Update a payment's metadata. */
      200: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
    };
  };
  postApiV1BusinessesBusinessIdContractorsIdInvite: {
    /**
     * Send invite to contractor
     * @description Delivers a secure onboarding email invitation to an existing contractor who has never been paid. If the contractor has an outstanding unaccepted invitation, the old invitation will be invalidated.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Delivers a secure onboarding email invitation to an existing contractor who has never been paid. If the contractor has an outstanding unaccepted invitation, the old invitation will be invalidated. */
      201: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  putApiV1BusinessesBusinessIdLineItemsId: {
    /**
     * Update line item
     * @description Update a line item's metadata.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['putApiV1BusinessesBusinessIdLineItems'];
      };
    };
    responses: {
      /** @description Update a line item's metadata. */
      200: {
        content: {
          'application/json': components['schemas']['LineItemEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Line item not found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdTransfers: {
    /**
     * List transfers
     * @description Get a list of all transfers.
     */
    parameters: {
      path: {
        business_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description Get a list of all transfers. */
      200: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdTransfers: {
    /**
     * Create transfer
     * @description Create a transfer transaction.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdTransfers'];
      };
    };
    responses: {
      /** @description Create a transfer transaction. */
      201: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BusinessesBusinessIdTransfersId: {
    /**
     * Show transfer
     * @description Get details of an existing transfer.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Get details of an existing transfer. */
      200: {
        content: {
          'application/json': components['schemas']['TransferTransactionEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1ContractorsId1099s: {
    /**
     * List all 1099s for a contractor
     * @description List all 1099s for a contractor
     */
    parameters: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
        year?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description List all 1099s for a contractor */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdPaymentsIdRetry: {
    /**
     * Retry payment
     * @description Retry a canceled or returned payment.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Retry a canceled or returned payment. */
      201: {
        content: {
          'application/json': components['schemas']['PaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Contractor not found */
      404: never;
    };
  };
  postApiV1BusinessesBusinessIdBatches: {
    /**
     * Create batch
     * @description Creates a new batch of payments.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdBatches'];
      };
    };
    responses: {
      /** @description Creates a new batch of payments. */
      201: {
        content: {
          'application/json': components['schemas']['BatchEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1Contractors: {
    /**
     * List contractors
     * @description List contractors.
     */
    parameters?: {
      /** @description Search query to find contractors */
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        q?: string;
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description List contractors. */
      200: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV1BusinessesBusinessIdBatchesId: {
    /**
     * Show batch
     * @description Returns the details of a single batch.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Returns the details of a single batch. */
      200: {
        content: {
          'application/json': components['schemas']['BatchEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdBalance: {
    /**
     * Show balance
     * @description Returns the current and available balance for the account.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    responses: {
      /** @description Returns the current and available balance for the account. */
      200: {
        content: {
          'application/json': components['schemas']['SubaccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV1BusinessesBusinessId1099s: {
    /**
     * List 1099s
     * @description Returns a list of 1099s, sorted newest-first.
     */
    parameters: {
      path: {
        business_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description Returns a list of 1099s, sorted newest-first. */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessId1099s: {
    /**
     * Create 1099
     * @description Create a 1099 for a contractor.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessId1099s'];
      };
    };
    responses: {
      /** @description Create a 1099 for a contractor. */
      201: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BusinessesBusinessId1099sId: {
    /**
     * Show 1099
     * @description Get details of a 1099.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Get details of a 1099. */
      200: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  postApiV1Contractors: {
    /**
     * Create contractor
     * @description Creates a new contractor.
     */
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1Contractors'];
      };
    };
    responses: {
      /** @description Creates a new contractor. */
      201: {
        content: {
          'application/json': components['schemas']['BusinessRelationshipEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1Subscriptions: {
    /**
     * List subscriptions
     * @description Returns a list of all subscriptions.
     */
    parameters?: {
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        page?: number;
        per_page?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description Returns a list of all subscriptions. */
      200: {
        content: {
          'application/json': components['schemas']['WebhookSubscriptionEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV1BusinessesBusinessId1099sIdRetrieve: {
    /**
     * Get 1099 PDF URL
     * @description Returns the URL to a PDF of a submitted 1099. The URL expires in 1 hour.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Returns the URL to a PDF of a submitted 1099. The URL expires in 1 hour. */
      200: never;
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  postApiV1BusinessesBusinessId1099sIdSubmit: {
    /**
     * Submit 1099 to IRS
     * @description Submit 1099 to the IRS.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Submit 1099 to the IRS. */
      201: {
        content: {
          'application/json': components['schemas']['Ten99Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BusinessesBusinessIdContractorsContractorIdAccountsId: {
    /**
     * Get account detail
     * @description Get details of an existing bank account.
     */
    parameters: {
      /** @description Account ID */
      path: {
        business_id: number;
        contractor_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Get details of an existing bank account. */
      200: {
        content: {
          'application/json': components['schemas']['AccountEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  getApiV1BusinessesBusinessIdCustomers: {
    /**
     * List customers
     * @description List customers.
     */
    parameters: {
      path: {
        business_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description List customers. */
      200: {
        content: {
          'application/json': components['schemas']['CustomerEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdCustomers: {
    /**
     * Create customer
     * @description Creates a new customer.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdCustomers'];
      };
    };
    responses: {
      /** @description Creates a new customer. */
      201: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BusinessesBusinessIdCustomersId: {
    /**
     * Return a customer
     * @description Returns the details for a given customer.
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for a given customer. */
      200: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1ContractorsIdW9: {
    /**
     * Show W-9 information
     * @description Get W9 information for a contractor.
     */
    parameters: {
      /** @description set true to include social security */
      query?: {
        include_ssn?: string;
      };
      path: {
        id: number;
      };
    };
    responses: {
      /** @description Get W9 information for a contractor. */
      200: {
        content: {
          'application/json': components['schemas']['W9Entity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  patchApiV1BusinessesBusinessIdCustomersId: {
    /**
     * Update a customer
     * @description Updates an existing customer
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['patchApiV1BusinessesBusinessIdCustomers'];
      };
    };
    responses: {
      /** @description Updates an existing customer */
      200: {
        content: {
          'application/json': components['schemas']['CustomerEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
  getApiV1BusinessesBusinessIdArPayments: {
    /**
     * List Accounts Receivable payments
     * @description List Accounts Receivable payments.
     */
    parameters: {
      path: {
        business_id: number;
      };
      /** @description Page offset to fetch. */
      /** @description Number of results to return per page. */
      /** @description Pad a number of results. */
      query?: {
        offset?: number;
        page?: number;
        per_page?: number;
      };
    };
    responses: {
      /** @description List Accounts Receivable payments. */
      200: {
        content: {
          'application/json': components['schemas']['ArPaymentEntity'][];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  postApiV1BusinessesBusinessIdArPayments: {
    /**
     * Create Accounts Receivable Payment
     * @description Creates a new Accounts Receivable Payment.
     */
    parameters: {
      path: {
        business_id: number;
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['postApiV1BusinessesBusinessIdArPayments'];
      };
    };
    responses: {
      /** @description Creates a new Accounts Receivable Payment. */
      201: {
        content: {
          'application/json': components['schemas']['ArPaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Validation Errors */
      422: {
        content: {
          'application/json': components['schemas']['RecordError'];
        };
      };
    };
  };
  getApiV1BusinessesBusinessIdArPaymentsId: {
    /**
     * Return an Accounts Receivable Payment
     * @description Returns the details for Accounts Receivable Payment
     */
    parameters: {
      path: {
        business_id: number;
        id: number;
      };
    };
    responses: {
      /** @description Returns the details for Accounts Receivable Payment */
      200: {
        content: {
          'application/json': components['schemas']['ArPaymentEntity'];
        };
      };
      /** @description Bad Request */
      400: never;
      /** @description Not Found */
      404: never;
    };
  };
}
