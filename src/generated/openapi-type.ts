export interface components {
  schemas: {
    /** @description BusinessRelationshipEntity model */
    BusinessRelationshipEntity: {
      /**
       * Format: int32
       * @description The contractor's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The contractor's email address
       * @example contractor@example.com
       */
      email?: string;
      /**
       * @description The contractor's first name
       * @example John
       */
      first_name?: string;
      /**
       * @description The contractor's last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description Optional customer-supplied unique identifier for this contractor
       * @example abc123
       */
      external_id?: string;
      /**
       * @description The contractor has connected an ACH account for receiving payments
       * @example true
       */
      has_ach?: boolean;
      /**
       * @description The contractor has a debit card for receiving payments
       * @example true
       */
      has_debit?: boolean;
      /**
       * Format: date-time
       * @description When the contractor was sent an invitation to onboard
       * @example 2023-05-25T19:24:32.640Z
       */
      invited_at?: string;
      /**
       * Format: date-time
       * @description When the contractor accepted the invitation
       * @example 2023-05-25T19:24:32.641Z
       */
      invitation_accepted_at?: string;
      /**
       * Format: date-time
       * @description When the contractor record was created
       * @example 2023-05-25T19:24:32.641Z
       */
      created_at?: string;
      /**
       * @description The contractor's phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * Format: date
       * @description The contractor's birthdate
       * @example 12/31/2021
       */
      birthdate?: string;
      /**
       * @description The contractor's 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description The contractor's 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description The contractor's city
       * @example New York
       */
      city?: string;
      /**
       * @description The contractor's state
       * @example NY
       */
      state?: string;
      /**
       * @description The contractor's zip code
       * @example 10010
       */
      zip?: string;
      /**
       * @description The contractor's social security number
       * @example 222-33-4444
       */
      social_security?: string;
      /** @description Error messages generated by system */
      errors?: string[];
    };
    /** @description Creates a new contractor. */
    postApiV1ContractorsBatch: {
      contractors: {
        /** @description Contractor email address */
        email: string;
        /** @description Contractor's first name */
        first_name: string;
        /** @description Contractor's last name */
        last_name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /**
         * @description Send email invitation when set to TRUE
         * @default false
         */
        send_invite?: boolean;
      }[];
    };
    /** @description RecordError model */
    RecordError: {
      /**
       * @description Summary error messages
       * @example Required field is missing
       */
      error?: string;
      /** @description Detail per error */
      messages?: string[];
    };
    /** @description Creates a new contractor. */
    postApiV1Contractors: {
      contractor: {
        /** @description Contractor email address */
        email: string;
        /** @description Contractor's first name */
        first_name: string;
        /** @description Contractor's last name */
        last_name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /**
         * @description Send email invitation when set to TRUE
         * @default false
         */
        send_invite?: boolean;
      };
    };
    /** @description ContractorInvitationEntity model */
    ContractorInvitationEntity: {
      /**
       * Format: int32
       * @description The contractor's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The contractor's email address
       * @example contractor@example.com
       */
      email?: string;
      /**
       * @description The contractor's first name
       * @example John
       */
      first_name?: string;
      /**
       * @description The contractor's last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description The contractor's invitation token
       * @example 1234567890
       */
      token?: string;
      /**
       * @description The contractor's invitation url
       * @example https://gigwage.com/invite/1234567
       */
      url?: string;
      /**
       * Format: date-time
       * @description When the contractor was sent an invitation to onboard
       * @example 2023-05-25T19:24:32.761Z
       */
      created_at?: string;
    };
    /** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
    patchApiV1Contractors: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-12345 */
        social_security?: string;
        /** @description Contractor's phone number. Required if address exists. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /** @description Customer assigned ID */
        external_id?: string;
      };
    };
    /** @description Ten99Entity model */
    Ten99Entity: {
      /**
       * Format: int32
       * @description The 1099's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * Format: int32
       * @description The ID of the contractor the 1099 was issued for
       * @example 123
       */
      contractor_id?: number;
      /**
       * Format: int32
       * @description The tax year covered by this 1099
       * @example 2020
       */
      year?: number;
      /**
       * @description The status of the 1099
       * @example submitted
       */
      status?: string;
      /**
       * @description The 1099 subtype
       * @example Ten99Nec
       */
      type?: string;
      /**
       * @description Validation errors
       * @example First name is missing
       */
      validation_errors?: Record<string, never>[];
      /**
       * @description Account Number
       * @example abc123
       */
      account_number?: string;
      /**
       * Format: int32
       * @description Id of a 1099 corrected by this one
       * @example 234
       */
      corrected?: number;
      /**
       * Format: int32
       * @description Id of this 1099's correction, if it has one
       * @example 987
       */
      correction?: number;
      box1?: string;
      box10?: string;
      box11?: string;
      box12?: string;
      box13?: string;
      box14?: string;
      box15a?: string;
      box15b?: string;
      box16aState?: string;
      box16aStateNo?: string;
      box16bState?: string;
      box16bStateNo?: string;
      box17a?: string;
      box17b?: string;
      box1a?: string;
      box1b?: string;
      box2?: string;
      box3?: string;
      box4?: string;
      box5?: string;
      box5a?: string;
      box5b?: string;
      box5c?: string;
      box5d?: string;
      box5e?: string;
      box5f?: string;
      box5g?: string;
      box5h?: string;
      box5i?: string;
      box5j?: string;
      box5k?: string;
      box5l?: string;
      box6?: string;
      box6a?: string;
      box6b?: string;
      box7?: string;
      box7a?: string;
      box7b?: string;
      box8?: string;
      box8a?: string;
      box8b?: string;
      box9?: string;
      second_tin?: string;
    };
    /** @description W9Entity model */
    W9Entity: {
      /**
       * @description First name
       * @example John
       */
      first_name?: string;
      /**
       * @description Last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description Email
       * @example entity@example.com
       */
      email?: string;
      /**
       * @description Social security number.
       * @example 111-22-3333
       */
      social_security?: string;
      /**
       * @description Phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * Format: date
       * @description Birthdate
       * @example 12/31/1990
       */
      birthdate?: string;
      /**
       * @description 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description City
       * @example New York
       */
      city?: string;
      /**
       * @description State
       * @example NY
       */
      state?: string;
      /**
       * @description Zip code
       * @example 10010
       */
      zip?: string;
      /**
       * @description Federal tax classification
       * @example single_member_llc
       */
      tax_classification?: string;
      /**
       * @description Tax classification for LLC
       * @example C
       */
      llc_classification?: string;
      /**
       * @description Other Classification for LLC
       * @example Sole Proprietor
       */
      other_classification?: string;
      /**
       * @description Vendor business name
       * @example Business Company Enterprises
       */
      business_name?: string;
      /**
       * @description Vendor's EIN
       * @example 11-222222
       */
      ein?: string;
      /**
       * @description Vendor's DBA
       * @example BCE
       */
      dba?: string;
      /**
       * Format: int32
       * @description Exempt payee code
       * @example 5
       */
      exempt_payee_code?: number;
      /**
       * @description Exemption from FACTA reporting code
       * @example E
       */
      fatca_reporting_exemption_code?: string;
      /**
       * @description Results of instant TIN check
       * @example pending
       */
      tin_check_status?: string;
      /**
       * @description Reason for TIN check results if applicable
       * @example TIN and Name combination does not match IRS record
       */
      tin_check_reason?: string;
      /**
       * @description Vendor or regular contractor?
       * @example true
       */
      vendor?: boolean;
      /**
       * @description Contractor prefers to receive a paper 1099
       * @example true
       */
      paper_1099?: boolean;
    };
    /** @description Update W9 information for a contractor. */
    patchApiV1ContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification?:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description True when contractor is vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Skip TIN check
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
    postApiV1ContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Skip TIN check
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Submit KYC (know your customer) information for a contractor */
    postApiV1ContractorsIdKyc: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234. Required for non-vendors */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /** @description Update contractor with KYC details and become a Vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's formation date. Required for vendors */
        business_formed_on?: string;
        /** @description Vendor's Industry. Required for vendors */
        industry?: string;
        /** @description Vendor's Entity. Required for vendors */
        entity?: string;
      };
    };
    /** @description Add a bank account to an existing contractor. */
    postApiV1ContractorsContractorIdAccounts: {
      account: {
        /** @description Bank account number */
        account_number: string;
        /** @description Routing number */
        routing_number: string;
        /** @description Bank account's nickname */
        name: string;
        /** @description Account type. `checking` or `savings` */
        account_type: string;
      };
    };
    /** @description AccountEntity model */
    AccountEntity: {
      /**
       * Format: int32
       * @description The account's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * @description Bank routing number
       * @example 10012345
       */
      routing_number?: string;
      /**
       * @description Account nickname
       * @example Personal checking
       */
      name?: string;
      /**
       * @description Checking or savings for bank accounts, card type for debit cards
       * @example checking
       */
      account_type?: string;
      /**
       * @description Last 4 digits of the account number
       * @example 1234
       */
      last4?: string;
      /**
       * Format: date-time
       * @description When the bank account record was created
       * @example 2023-05-25T19:24:32.772Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description When the bank account record was deactivated
       * @example 2023-05-25T19:24:32.772Z
       */
      deactivated_at?: string;
    };
    /** @description Add debit card to contractor */
    postApiV1ContractorsContractorIdCards: {
      card: {
        /** @description A name for this account */
        name: string;
        /** @description Card number */
        card_number: string;
        /** @description Expiration date (yyyymm) */
        exp_date: string;
      };
    };
    /** @description Upload identity document */
    postApiV1ContractorsContractorIdIdentityDocument: {
      identity_document: {
        /**
         * @description The document type. Can be passport or driver_license
         * @enum {string}
         */
        subtype: 'driver_license' | 'passport';
        /** @description The front page of document file (Image or PDF) */
        front: string;
        /** @description The back page of document file (Image or PDF) */
        back: string;
      };
    };
    /** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
    postApiV1Payments: {
      payment: {
        /** Format: int32 */
        contractor_id: number;
        external_id?: string;
        /**
         * @default null
         * @enum {string}
         */
        interchange?: true | '' | 'true' | 'false' | '';
        /**
         * @default null
         * @enum {string}
         */
        debit_card?: true | '' | 'true' | 'false' | '';
        line_items: {
          /** Format: float */
          amount: number;
          job_id?: string;
          external_id?: string;
          reason?: string;
          /** @default false */
          reimbursement?: boolean;
          metadata?: Record<string, never>;
        }[];
        metadata?: Record<string, never>;
        nonce: string;
      };
    };
    /** @description PaymentEntity model */
    PaymentEntity: {
      /**
       * Format: int32
       * @description The payments's unique identifier
       * @example 424542
       */
      id?: number;
      /**
       * Format: float
       * @description The total payment amount excluding fees
       * @example 409.4
       */
      amount?: number;
      line_items?: components['schemas']['LineItemEntity'][];
      /**
       * Format: int32
       * @example 21488
       */
      contractor_id?: number;
      contractor?: components['schemas']['ContractorEntity'];
      /**
       * Format: date-time
       * @description When the payment was created
       * @example 2023-04-25T19:24:32.763Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description When the payment was completed, if applicable. This is an estimation provided by the receiving bank.
       * @example 2023-04-27T19:24:32.763Z
       */
      completed_at?: string;
      /**
       * @description The current status of the payment
       * @example pending
       */
      status?: string;
      /**
       * @description Optional customer-supplied unique identifier for this payment
       * @example abc123
       */
      external_id?: string;
      /**
       * @description Payment metadata JSON
       * @example {"contact_phone_number": "222-333-4444"}
       */
      metadata?: string;
      /**
       * Format: float
       * @description The total fee charged to sender
       * @example 0.49
       */
      sender_fee?: number;
      /**
       * Format: float
       * @description The total fee charged to recipient
       * @example 0.5
       */
      recipient_fee?: number;
      /**
       * Format: float
       * @description The amount deposited, after fees
       * @example 408.9
       */
      net_deposit_amount?: number;
    };
    /** @description LineItemEntity model */
    LineItemEntity: {
      /**
       * Format: int32
       * @description The line_item's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * Format: float
       * @description The amount of the line item in dollars
       * @example 10.99
       */
      amount?: number;
      /**
       * @description The user-supplied note for this line item
       * @example Payment for 10/30/21
       */
      reason?: string;
      /**
       * @description Whether this line item represents a reimbursement for a contractor's expense
       * @example false
       */
      reimbursement?: boolean;
      /**
       * @description Optional customer-supplied association with a job
       * @example abc123
       */
      job_id?: string;
      /**
       * @description Optional customer-supplied unique identifier for this line item
       * @example def456
       */
      external_id?: string;
      /**
       * @description Line item metadata
       * @example {"YTD payments": 100}
       */
      metadata?: string;
    };
    ContractorEntity: {
      /**
       * Format: int32
       * @description The contractor's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The contractor's email address
       * @example contractor@example.com
       */
      email?: string;
      /**
       * @description The contractor's first name
       * @example John
       */
      first_name?: string;
      /**
       * @description The contractor's last name
       * @example Smith
       */
      last_name?: string;
      /**
       * @description The contractor has connected an ACH account for receiving payments
       * @example true
       */
      has_ach?: boolean;
      /**
       * @description The contractor has a debit card for receiving payments
       * @example true
       */
      has_debit?: boolean;
      /**
       * Format: date-time
       * @description When the contractor was sent an invitation to onboard
       * @example 2023-05-25T19:24:32.763Z
       */
      invited_at?: string;
      /**
       * Format: date-time
       * @description When the contractor accepted the invitation
       * @example 2023-05-25T19:24:32.763Z
       */
      invitation_accepted_at?: string;
      /**
       * Format: date-time
       * @description When the contractor record was created
       * @example 2023-05-25T19:24:32.763Z
       */
      created_at?: string;
      /**
       * @description The contractor's phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * Format: date
       * @description The contractor's birthdate
       * @example 12/31/2021
       */
      birthdate?: string;
      /**
       * @description The contractor's 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description The contractor's 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description The contractor's city
       * @example New York
       */
      city?: string;
      /**
       * @description The contractor's state
       * @example NY
       */
      state?: string;
      /**
       * @description The contractor's zip code
       * @example 10010
       */
      zip?: string;
      /**
       * @description The contractor's social security number
       * @example 222-33-4444
       */
      social_security?: string;
    };
    /** @description Update a payment's metadata. */
    putApiV1Payments: {
      payment: {
        metadata?: Record<string, never>;
      };
    };
    /** @description Update a line item's metadata. */
    putApiV1LineItems: {
      line_item: {
        metadata?: Record<string, never>;
      };
    };
    /** @description TransferTransactionEntity model */
    TransferTransactionEntity: {
      /**
       * Format: int32
       * @description The transfer's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * @description Fund or Withdraw
       * @example fund
       */
      direction?: string;
      /**
       * Format: float
       * @description The amount of the transfer
       * @example 10.99
       */
      amount?: number;
      /**
       * @description The current status of the transfer
       * @example SETTLED
       */
      status?: string;
      /**
       * Format: date-time
       * @description When the transfer was created
       * @example 2023-05-25T19:24:32.896Z
       */
      created_at?: string;
    };
    /** @description Create a transfer transaction. */
    postApiV1Transfers: {
      transfer: {
        /** Format: double */
        amount: number;
        /** @enum {string} */
        direction: 'fund' | 'withdraw';
        nonce: string;
      };
    };
    /** @description Create a new API key. Note: This is the only time you'll get the secret. */
    postApiV1ApiKeys: {
      api_key: {
        /** @description API Key name */
        name?: string;
        /** @description Create a key for simplified sandbox authentication */
        test_key?: boolean;
      };
    };
    /** @description ApiKeyEntity model */
    ApiKeyEntity: {
      /**
       * @description Name
       * @example Production
       */
      name?: string;
      /**
       * @description Key
       * @example abcdef1234
       */
      key?: string;
      /**
       * @description Secret
       * @example abcdef1234
       */
      secret?: string;
      /**
       * Format: date-time
       * @description When the api key was revoked
       * @example 2023-05-25T19:24:32.954Z
       */
      revoked_at?: string;
      /**
       * Format: date-time
       * @description When the api key was created
       * @example 2023-05-25T19:24:32.954Z
       */
      created_at?: string;
    };
    /** @description Subscribe to webhooks of the chosen type. Please note that multiple consecutive failures to deliver webhooks will deactivate this subscription, and it will need to be reactivated. See PUT below. */
    postApiV1Subscriptions: {
      subscription: {
        /** @description Webhook type, can be payment, tin_check, partner_sign_up, 1099 */
        webhook_type: string;
        /** @description URL that the webhook will be sent to */
        url: string;
      };
    };
    /** @description WebhookSubscriptionEntity model */
    WebhookSubscriptionEntity: {
      /**
       * Format: int32
       * @description The subscription's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description Webhook type
       * @example emitted
       */
      webhook_type?: string;
      /**
       * @description URL to deliver webhooks to
       * @example https://example.org/hook
       */
      url?: string;
      /**
       * Format: date-time
       * @description When the subscription was deactivated
       * @example 2023-05-25T19:24:33.020Z
       */
      deactivated_at?: string;
      /**
       * Format: date-time
       * @description When the subscription was created
       * @example 2023-05-25T19:24:33.020Z
       */
      created_at?: string;
    };
    /** @description Change the URL where webhooks are sent. */
    patchApiV1Subscriptions: {
      subscription: {
        /** @description URL that the webhook will be sent to */
        url: string;
      };
    };
    /** @description Creates a new batch of payments. */
    postApiV1Batches: {
      batch: {
        nonce: string;
        notes?: string;
        payments: {
          /** Format: int32 */
          contractor_id: number;
          external_id?: string;
          /**
           * @default null
           * @enum {string}
           */
          interchange?: true | '' | 'true' | 'false' | '';
          /**
           * @default null
           * @enum {string}
           */
          debit_card?: true | '' | 'true' | 'false' | '';
          line_items: {
            /** Format: float */
            amount: number;
            job_id?: string;
            external_id?: string;
            reason?: string;
            /** @default false */
            reimbursement?: boolean;
            metadata?: Record<string, never>;
          }[];
          metadata?: Record<string, never>;
        }[];
      };
    };
    /** @description BatchEntity model */
    BatchEntity: {
      /**
       * Format: int32
       * @description The batch's unique identifier
       * @example 123
       */
      id?: number;
      payments?: components['schemas']['PaymentEntity'][];
      /**
       * Format: int32
       * @description Total payments in batch
       * @example 21
       */
      payments_count?: number;
      /**
       * @description Notes of batch
       * @example This is my note
       */
      notes?: string;
      /**
       * @description Date when batch was created
       * @example 2023-05-25T19:24:33.029Z
       */
      created_at?: string;
    };
    /** @description SubaccountEntity model */
    SubaccountEntity: {
      /**
       * Format: double
       * @description The subaccount current balance
       * @example 100
       */
      current_balance?: number;
      /**
       * Format: double
       * @description The subaccount available balance
       * @example 85
       */
      available_balance?: number;
    };
    /** @description Create a 1099 for a contractor. */
    postApiV11099s: {
      1099: {
        /** Format: int32 */
        contractor_id: number;
        /** @enum {string} */
        type: 'K' | 'NEC' | 'MISC';
        /** @description Box 1b (decimal) */
        box1b?: string;
        /**
         * Format: float
         * @description Box 2 (boolean)
         * @default null
         * @enum {number}
         */
        box2?: number;
        /**
         * Format: int32
         * @description Box 3 (integer)
         */
        box3?: number;
        /**
         * Format: float
         * @description Box 5c (decimal)
         */
        box5c?: number;
        /**
         * Format: float
         * @description Box 4 (decimal)
         */
        box4?: number;
        /**
         * Format: float
         * @description Box 5a (string)
         */
        box5a?: number;
        /**
         * Format: float
         * @description Box 5b (string)
         */
        box5b?: number;
        /**
         * Format: float
         * @description Box 5d (decimal)
         */
        box5d?: number;
        /**
         * Format: float
         * @description Box 5e (decimal)
         */
        box5e?: number;
        /**
         * Format: float
         * @description Box 5f (decimal)
         */
        box5f?: number;
        /**
         * Format: float
         * @description Box 5g (decimal)
         */
        box5g?: number;
        /**
         * Format: float
         * @description Box 5h (decimal)
         */
        box5h?: number;
        /**
         * Format: float
         * @description Box 5i (decimal)
         */
        box5i?: number;
        /**
         * Format: float
         * @description Box 5j (decimal)
         */
        box5j?: number;
        /**
         * Format: float
         * @description Box 5k (decimal)
         */
        box5k?: number;
        /**
         * Format: float
         * @description Box 5l (decimal)
         */
        box5l?: number;
        /** @description Box 6a (string) */
        box6a?: string;
        /** @description Box 6b (string) */
        box6b?: string;
        /**
         * Format: float
         * @description Box 7a (decimal)
         */
        box7a?: number;
        /**
         * Format: float
         * @description Box 7b (decimal)
         */
        box7b?: number;
        /** @description Box 8a (decimal) */
        box8a?: string;
        /** @description Box 8b (decimal) */
        box8b?: string;
        /**
         * Format: float
         * @description Box 1 (decimal)
         */
        box1?: number;
        /**
         * Format: float
         * @description Box 5 (decimal)
         */
        box5?: number;
        /**
         * Format: float
         * @description Box 6 (decimal)
         */
        box6?: number;
        /**
         * @description Box 7 (boolean)
         * @default null
         * @enum {string}
         */
        box7?: true | '' | 'true' | 'false' | '';
        /**
         * Format: float
         * @description Box 8 (decimal)
         */
        box8?: number;
        /**
         * Format: float
         * @description Box 9 (decimal)
         */
        box9?: number;
        /**
         * Format: float
         * @description Box 10 (decimal)
         */
        box10?: number;
        /**
         * Format: float
         * @description Box 11 (decimal)
         */
        box11?: number;
        /**
         * Format: float
         * @description Box 12 (decimal)
         */
        box12?: number;
        /**
         * Format: float
         * @description Box 13 (decimal)
         */
        box13?: number;
        /**
         * Format: float
         * @description Box 14 (decimal)
         */
        box14?: number;
      };
    };
    /** @description WebhookEntity model */
    WebhookEntity: {
      /**
       * Format: int32
       * @description The webhook's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * Format: int32
       * @description The object's unique identifier
       * @example 234
       */
      object_id?: number;
      /**
       * @description The object's type
       * @example ACH-US
       */
      object_type?: string;
      /**
       * @description Data / payload sent to the subscription URL
       * @example {"some_data": "some_value"}
       */
      payload?: string;
      /**
       * @description URL the webhook was sent to
       * @example https://example.org/webhook
       */
      url?: string;
      /**
       * Format: date-time
       * @description When the webhook was sent
       * @example 2023-05-25T19:24:33.061Z
       */
      sent_at?: string;
    };
    /** @description LedgerEntity model */
    LedgerEntity: {
      /**
       * Format: float
       * @description Current balance
       * @example 132125.2
       */
      current_balance?: number;
      /**
       * Format: float
       * @description Available balance
       * @example 124510.99
       */
      available_balance?: number;
      transactions?: components['schemas']['TransactionEntity'][];
    };
    TransactionEntity: {
      /**
       * Format: int32
       * @description The transaction's unique identifier
       * @example 42
       */
      id?: number;
      /**
       * Format: float
       * @description The amount of incoming transaction
       * @example 9912.23
       */
      incoming?: number;
      /**
       * Format: float
       * @description The amount of outgoing transaction
       * @example 12315.25
       */
      outgoing?: number;
      /**
       * @description The current status of the transaction
       * @example Settled
       */
      status?: string;
      /**
       * @description Description of transaction
       * @example Payment to Contractor One
       */
      description?: string;
      /**
       * Format: date-time
       * @description When the transaction was created
       * @example 2023-05-25T19:24:33.067Z
       */
      created_at?: string;
    };
    /** @description Creates a new customer. */
    postApiV1Customers: {
      customer: {
        /** @description Customer email address */
        email: string;
        /** @description Customer's full name */
        name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /** @description Customer's account number. Example: 1231231234 */
        account_number: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type: 'checking' | 'savings';
        /** @description The authorization document file (Image or PDF) */
        authorization: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
      };
    };
    /** @description CustomerEntity model */
    CustomerEntity: {
      /**
       * Format: int32
       * @description The customer's unique identifier
       * @example 123
       */
      id?: number;
      /**
       * @description The customer's email address
       * @example customer@example.com
       */
      email?: string;
      /**
       * @description The customer's full name
       * @example John
       */
      name?: string;
      /**
       * @description Optional customer-supplied unique identifier for this customer
       * @example abc123
       */
      external_id?: string;
      /**
       * Format: date-time
       * @description When the customer record was created
       * @example 2023-05-25T19:24:33.071Z
       */
      created_at?: string;
      /**
       * @description The customer's phone number
       * @example 222-333-4444
       */
      phone_number?: string;
      /**
       * @description When the customer record was deleted
       * @example 2023-05-25T19:24:33.071Z
       */
      deleted_at?: string;
      /**
       * @description The customer's 1st address line
       * @example 123 Main st
       */
      address1?: string;
      /**
       * @description The customer's 2nd address line
       * @example Suite 100
       */
      address2?: string;
      /**
       * @description The customer's city
       * @example New York
       */
      city?: string;
      /**
       * @description The customer's state
       * @example NY
       */
      state?: string;
      /**
       * @description The customer's zip code
       * @example 10010
       */
      zip?: string;
    };
    /** @description Updates an existing customer */
    patchApiV1Customers: {
      customer: {
        /** @description Customer email address */
        email?: string;
        /** @description Customer's full name */
        name?: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /** @description Customer's account number. Example: 1231231234 */
        account_number?: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number?: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type?: 'checking' | 'savings';
        /** @description The authorization document file (Image or PDF) */
        authorization?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
      };
    };
    /** @description Creates a new Accounts Receivable Payment. */
    postApiV1ArPayments: {
      ar_payment: {
        /** Format: int32 */
        customer_id: number;
        /** Format: float */
        amount: number;
        reason?: string;
        nonce: string;
      };
    };
    /** @description ArPaymentEntity model */
    ArPaymentEntity: {
      /**
       * Format: int32
       * @description The Accounts Receivable payments's unique identifier
       * @example 424542
       */
      id?: number;
      /**
       * Format: float
       * @description The total Accounts Receivable payment amount excluding fees
       * @example 409.4
       */
      amount?: number;
      /**
       * @description Reason or description for this Accounts Receivable Payment
       * @example For service fee charge
       */
      reason?: string;
      /**
       * Format: int32
       * @example 21488
       */
      customer_id?: number;
      /**
       * Format: date-time
       * @description When the Accounts Receivable payment was created
       * @example 2023-04-25T19:24:33.078Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description When the Accounts Receivable payment was completed, if applicable
       * @example 2023-04-27T19:24:33.078Z
       */
      completed_at?: string;
      /**
       * @description The current status of the payment
       * @example pending
       */
      status?: string;
      /**
       * @description Optional customer-supplied unique identifier for this payment
       * @example abc123
       */
      external_id?: string;
      customer?: components['schemas']['CustomerEntity'];
    };
    /** @description Creates a new contractor. */
    postApiV1BusinessesBusinessIdContractorsBatch: {
      contractors: {
        /** @description Contractor email address */
        email: string;
        /** @description Contractor's first name */
        first_name: string;
        /** @description Contractor's last name */
        last_name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /**
         * @description Send email invitation when set to TRUE
         * @default false
         */
        send_invite?: boolean;
      }[];
    };
    /** @description Creates a new contractor. */
    postApiV1BusinessesBusinessIdContractors: {
      contractor: {
        /** @description Contractor email address */
        email: string;
        /** @description Contractor's first name */
        first_name: string;
        /** @description Contractor's last name */
        last_name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /**
         * @description Send email invitation when set to TRUE
         * @default false
         */
        send_invite?: boolean;
      };
    };
    /** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
    patchApiV1BusinessesBusinessIdContractors: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-12345 */
        social_security?: string;
        /** @description Contractor's phone number. Required if address exists. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /** @description Customer assigned ID */
        external_id?: string;
      };
    };
    /** @description Update W9 information for a contractor. */
    patchApiV1BusinessesBusinessIdContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification?:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description True when contractor is vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Skip TIN check
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
    postApiV1BusinessesBusinessIdContractorsIdW9: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234 */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate?: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /**
         * @description Contractor's federal tax classification is required
         * @enum {string}
         */
        tax_classification:
          | 'single_member_llc'
          | 'c_corporation'
          | 's_corporation'
          | 'partnership'
          | 'trust_estate'
          | 'limited_liability_company'
          | 'other';
        /**
         * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
         * @enum {string}
         */
        llc_classification?: 'C' | 'S' | 'P';
        /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
        other_classification?: string;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's DBA */
        dba?: string;
        /**
         * Format: int32
         * @description Exempt payee code
         */
        exempt_payee_code?: number;
        /** @description Exemption from FATCA reporting code */
        fatca_reporting_exemption_code?: string;
        /** @description Paper or Digital 1099 */
        paper_1099?: boolean;
        /**
         * @description Skip TIN check
         * @default false
         */
        allow_tin_skip?: boolean;
      };
    };
    /** @description Submit KYC (know your customer) information for a contractor */
    postApiV1BusinessesBusinessIdContractorsIdKyc: {
      contractor: {
        first_name?: string;
        last_name?: string;
        /** @description Contractor email address */
        email?: string;
        /** @description Contractor's social security number. For example: 123-12-1234. Required for non-vendors */
        social_security?: string;
        /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /**
         * Format: date
         * @description Contractor's birthdate. Format: YYYY-MM-DD
         */
        birthdate: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
        /** @description Update contractor with KYC details and become a Vendor */
        vendor?: boolean;
        /** @description Vendor business name. Required for vendors */
        business_name?: string;
        /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
        ein?: string;
        /** @description Vendor's formation date. Required for vendors */
        business_formed_on?: string;
        /** @description Vendor's Industry. Required for vendors */
        industry?: string;
        /** @description Vendor's Entity. Required for vendors */
        entity?: string;
      };
    };
    /** @description Add a bank account to an existing contractor. */
    postApiV1BusinessesBusinessIdContractorsContractorIdAccounts: {
      account: {
        /** @description Bank account number */
        account_number: string;
        /** @description Routing number */
        routing_number: string;
        /** @description Bank account's nickname */
        name: string;
        /** @description Account type. `checking` or `savings` */
        account_type: string;
      };
    };
    /** @description Add debit card to contractor */
    postApiV1BusinessesBusinessIdContractorsContractorIdCards: {
      card: {
        /** @description A name for this account */
        name: string;
        /** @description Card number */
        card_number: string;
        /** @description Expiration date (yyyymm) */
        exp_date: string;
      };
    };
    /** @description Upload identity document */
    postApiV1BusinessesBusinessIdContractorsContractorIdIdentityDocument: {
      identity_document: {
        /**
         * @description The document type. Can be passport or driver_license
         * @enum {string}
         */
        subtype: 'driver_license' | 'passport';
        /** @description The front page of document file (Image or PDF) */
        front: string;
        /** @description The back page of document file (Image or PDF) */
        back: string;
      };
    };
    /** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
    postApiV1BusinessesBusinessIdPayments: {
      payment: {
        /** Format: int32 */
        contractor_id: number;
        external_id?: string;
        /**
         * @default null
         * @enum {string}
         */
        interchange?: true | '' | 'true' | 'false' | '';
        /**
         * @default null
         * @enum {string}
         */
        debit_card?: true | '' | 'true' | 'false' | '';
        line_items: {
          /** Format: float */
          amount: number;
          job_id?: string;
          external_id?: string;
          reason?: string;
          /** @default false */
          reimbursement?: boolean;
          metadata?: Record<string, never>;
        }[];
        metadata?: Record<string, never>;
        nonce: string;
      };
    };
    /** @description Update a payment's metadata. */
    putApiV1BusinessesBusinessIdPayments: {
      payment: {
        metadata?: Record<string, never>;
      };
    };
    /** @description Update a line item's metadata. */
    putApiV1BusinessesBusinessIdLineItems: {
      line_item: {
        metadata?: Record<string, never>;
      };
    };
    /** @description Create a transfer transaction. */
    postApiV1BusinessesBusinessIdTransfers: {
      transfer: {
        /** Format: double */
        amount: number;
        /** @enum {string} */
        direction: 'fund' | 'withdraw';
        nonce: string;
      };
    };
    /** @description Creates a new batch of payments. */
    postApiV1BusinessesBusinessIdBatches: {
      batch: {
        nonce: string;
        notes?: string;
        payments: {
          /** Format: int32 */
          contractor_id: number;
          external_id?: string;
          /**
           * @default null
           * @enum {string}
           */
          interchange?: true | '' | 'true' | 'false' | '';
          /**
           * @default null
           * @enum {string}
           */
          debit_card?: true | '' | 'true' | 'false' | '';
          line_items: {
            /** Format: float */
            amount: number;
            job_id?: string;
            external_id?: string;
            reason?: string;
            /** @default false */
            reimbursement?: boolean;
            metadata?: Record<string, never>;
          }[];
          metadata?: Record<string, never>;
        }[];
      };
    };
    /** @description Create a 1099 for a contractor. */
    postApiV1BusinessesBusinessId1099s: {
      1099: {
        /** Format: int32 */
        contractor_id: number;
        /** @enum {string} */
        type: 'K' | 'NEC' | 'MISC';
        /** @description Box 1b (decimal) */
        box1b?: string;
        /**
         * Format: float
         * @description Box 2 (boolean)
         * @default null
         * @enum {number}
         */
        box2?: number;
        /**
         * Format: int32
         * @description Box 3 (integer)
         */
        box3?: number;
        /**
         * Format: float
         * @description Box 5c (decimal)
         */
        box5c?: number;
        /**
         * Format: float
         * @description Box 4 (decimal)
         */
        box4?: number;
        /**
         * Format: float
         * @description Box 5a (string)
         */
        box5a?: number;
        /**
         * Format: float
         * @description Box 5b (string)
         */
        box5b?: number;
        /**
         * Format: float
         * @description Box 5d (decimal)
         */
        box5d?: number;
        /**
         * Format: float
         * @description Box 5e (decimal)
         */
        box5e?: number;
        /**
         * Format: float
         * @description Box 5f (decimal)
         */
        box5f?: number;
        /**
         * Format: float
         * @description Box 5g (decimal)
         */
        box5g?: number;
        /**
         * Format: float
         * @description Box 5h (decimal)
         */
        box5h?: number;
        /**
         * Format: float
         * @description Box 5i (decimal)
         */
        box5i?: number;
        /**
         * Format: float
         * @description Box 5j (decimal)
         */
        box5j?: number;
        /**
         * Format: float
         * @description Box 5k (decimal)
         */
        box5k?: number;
        /**
         * Format: float
         * @description Box 5l (decimal)
         */
        box5l?: number;
        /** @description Box 6a (string) */
        box6a?: string;
        /** @description Box 6b (string) */
        box6b?: string;
        /**
         * Format: float
         * @description Box 7a (decimal)
         */
        box7a?: number;
        /**
         * Format: float
         * @description Box 7b (decimal)
         */
        box7b?: number;
        /** @description Box 8a (decimal) */
        box8a?: string;
        /** @description Box 8b (decimal) */
        box8b?: string;
        /**
         * Format: float
         * @description Box 1 (decimal)
         */
        box1?: number;
        /**
         * Format: float
         * @description Box 5 (decimal)
         */
        box5?: number;
        /**
         * Format: float
         * @description Box 6 (decimal)
         */
        box6?: number;
        /**
         * @description Box 7 (boolean)
         * @default null
         * @enum {string}
         */
        box7?: true | '' | 'true' | 'false' | '';
        /**
         * Format: float
         * @description Box 8 (decimal)
         */
        box8?: number;
        /**
         * Format: float
         * @description Box 9 (decimal)
         */
        box9?: number;
        /**
         * Format: float
         * @description Box 10 (decimal)
         */
        box10?: number;
        /**
         * Format: float
         * @description Box 11 (decimal)
         */
        box11?: number;
        /**
         * Format: float
         * @description Box 12 (decimal)
         */
        box12?: number;
        /**
         * Format: float
         * @description Box 13 (decimal)
         */
        box13?: number;
        /**
         * Format: float
         * @description Box 14 (decimal)
         */
        box14?: number;
      };
    };
    /** @description Creates a new customer. */
    postApiV1BusinessesBusinessIdCustomers: {
      customer: {
        /** @description Customer email address */
        email: string;
        /** @description Customer's full name */
        name: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number: string;
        /** @description Customer's account number. Example: 1231231234 */
        account_number: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type: 'checking' | 'savings';
        /** @description The authorization document file (Image or PDF) */
        authorization: string;
        /** @description Line address 1 */
        address1: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city: string;
        /** @description Zip code */
        zip: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state: string;
      };
    };
    /** @description Updates an existing customer */
    patchApiV1BusinessesBusinessIdCustomers: {
      customer: {
        /** @description Customer email address */
        email?: string;
        /** @description Customer's full name */
        name?: string;
        /** @description Customer assigned ID */
        external_id?: string;
        /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
        phone_number?: string;
        /** @description Customer's account number. Example: 1231231234 */
        account_number?: string;
        /** @description Customer's bank routing number. Example: 9923123 */
        routing_number?: string;
        /**
         * @description The account type. Can be checking or savings
         * @enum {string}
         */
        account_type?: 'checking' | 'savings';
        /** @description The authorization document file (Image or PDF) */
        authorization?: string;
        /** @description Line address 1 */
        address1?: string;
        /** @description Line address 2 */
        address2?: string;
        /** @description City */
        city?: string;
        /** @description Zip code */
        zip?: string;
        /** @description State, 2 characters US State Code (ISO 3166-2) */
        state?: string;
      };
    };
    /** @description Creates a new Accounts Receivable Payment. */
    postApiV1BusinessesBusinessIdArPayments: {
      ar_payment: {
        /** Format: int32 */
        customer_id: number;
        /** Format: float */
        amount: number;
        reason?: string;
        nonce: string;
      };
    };
  };
  responses: never;
  parameters: never;
  requestBodies: {
    patchApiV11099sId?: {
      content: {
        'application/x-www-form-urlencoded': {
          /** @description Box 1a (decimal) - Type K only */
          '1099[box1a]'?: string;
          /** @description Box 1b (decimal) - Type K only */
          '1099[box1b]'?: string;
          /** @description Box 2 (boolean) - Type NEC only */
          '1099[box2]'?: boolean;
          /** @description Box 3 (decimal) - Type K only */
          '1099[box3]'?: string;
          /** @description Box 4 (decimal) */
          '1099[box4]'?: string;
          /** @description Box 5a (decimal) */
          '1099[box5a]'?: string;
          /** @description Box 5b (decimal) */
          '1099[box5b]'?: string;
          /** @description Box 5c (decimal) - Type K only */
          '1099[box5c]'?: string;
          /** @description Box 5d (decimal) - Type K only */
          '1099[box5d]'?: string;
          /** @description Box 5e (decimal) - Type K only */
          '1099[box5e]'?: string;
          /** @description Box 5f (decimal) - Type K only */
          '1099[box5f]'?: string;
          /** @description Box 5g (decimal) - Type K only */
          '1099[box5g]'?: string;
          /** @description Box 5h (decimal) - Type K only */
          '1099[box5h]'?: string;
          /** @description Box 5i (decimal) - Type K only */
          '1099[box5i]'?: string;
          /** @description Box 5j (decimal) - Type K only */
          '1099[box5j]'?: string;
          /** @description Box 5k (decimal) - Type K only */
          '1099[box5k]'?: string;
          /** @description Box 5l (decimal) - Type K only */
          '1099[box5l]'?: string;
          /** @description Box 6a (string) */
          '1099[box6a]'?: string;
          /** @description Box 6b (string) */
          '1099[box6b]'?: string;
          /** @description Box 7a (decimal) - Type NEC only */
          '1099[box7a]'?: string;
          /** @description Box 7b (decimal) - Type NEC only */
          '1099[box7b]'?: string;
          /** @description Box 8a (decimal) - Type K only */
          '1099[box8a]'?: string;
          /** @description Box 8b (decimal) - Type K only */
          '1099[box8b]'?: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}
