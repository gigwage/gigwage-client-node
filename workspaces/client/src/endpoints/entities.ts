/* eslint-disable typescript-sort-keys/interface */
/** @description AccountEntity model */
export type AccountEntity = {
  /**
   * @description Checking or savings for bank accounts, card type for debit cards
   * @example checking
   */
  account_type?: string;
  /**
   * Format: date-time
   * @description When the bank account record was created
   * @example 2023-01-04T00:04:07.739Z
   */
  created_at?: string;
  /**
   * Format: date-time
   * @description When the bank account record was deactivated
   * @example 2023-01-04T00:04:07.739Z
   */
  deactivated_at?: string;
  /**
   * Format: int32
   * @description The account's unique identifier
   * @example 42
   */
  id?: number;
  /**
   * @description Last 4 digits of the account number
   * @example 1234
   */
  last4?: string;
  /**
   * @description Account nickname
   * @example Personal checking
   */
  name?: string;
  /**
   * @description Bank routing number
   * @example 10012345
   */
  routing_number?: string;
};
/** @description ApiKeyEntity model */
export type ApiKeyEntity = {
  /**
   * Format: date-time
   * @description When the api key was created
   * @example 2023-01-04T00:04:07.988Z
   */
  created_at?: string;
  /**
   * @description Key
   * @example abcdef1234
   */
  key?: string;
  /**
   * @description Name
   * @example Production
   */
  name?: string;
  /**
   * Format: date-time
   * @description When the api key was revoked
   * @example 2023-01-04T00:04:07.988Z
   */
  revoked_at?: string;
  /**
   * @description Secret
   * @example abcdef1234
   */
  secret?: string;
};
/** @description ArPaymentEntity model */
export type ArPaymentEntity = {
  /**
   * Format: float
   * @description The total Accounts Receivable payment amount excluding fees
   * @example 409.4
   */
  amount?: number;
  /**
   * Format: date-time
   * @description When the Accounts Receivable payment was completed, if applicable
   * @example 2022-12-07T00:04:08.144Z
   */
  completed_at?: string;
  /**
   * Format: date-time
   * @description When the Accounts Receivable payment was created
   * @example 2022-12-04T00:04:08.144Z
   */
  created_at?: string;
  customer?: CustomerEntity;
  /**
   * Format: int32
   * @example 21488
   */
  customer_id?: number;
  /**
   * @description Optional customer-supplied unique identifier for this payment
   * @example abc123
   */
  external_id?: string;
  /**
   * Format: int32
   * @description The Accounts Receivable payments's unique identifier
   * @example 424542
   */
  id?: number;
  /**
   * @description Reason or description for this Accounts Receivable Payment
   * @example For service fee charge
   */
  reason?: string;
  /**
   * @description The current status of the payment
   * @example pending
   */
  status?: string;
};
/** @description BatchEntity model */
export type BatchEntity = {
  /**
   * @description Date when batch was created
   * @example 2023-01-04T00:04:08.076Z
   */
  created_at?: string;
  /**
   * Format: int32
   * @description The batch's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * @description Notes of batch
   * @example This is my note
   */
  notes?: string;
  payments?: PaymentEntity[];
  /**
   * Format: int32
   * @description Total payments in batch
   * @example 21
   */
  payments_count?: number;
};
/** @description BusinessRelationshipEntity model */
export type BusinessRelationshipEntity = {
  /**
   * @description The contractor's 1st address line
   * @example 123 Main st
   */
  address1?: string;
  /**
   * @description The contractor's 2nd address line
   * @example Suite 100
   */
  address2?: string;
  /**
   * Format: date
   * @description The contractor's birthdate
   * @example 12/31/2021
   */
  birthdate?: string;
  /**
   * @description The contractor's city
   * @example New York
   */
  city?: string;
  /**
   * Format: date-time
   * @description When the contractor record was created
   * @example 2023-01-04T00:04:07.561Z
   */
  created_at?: string;
  /**
   * @description The contractor's email address
   * @example contractor@example.com
   */
  email?: string;
  /** @description Error messages generated by system */
  errors?: string[];
  /**
   * @description Optional customer-supplied unique identifier for this contractor
   * @example abc123
   */
  external_id?: string;
  /**
   * @description The contractor's first name
   * @example John
   */
  first_name?: string;
  /**
   * @description The contractor has connected an ACH account for receiving payments
   * @example true
   */
  has_ach?: boolean;
  /**
   * @description The contractor has a debit card for receiving payments
   * @example true
   */
  has_debit?: boolean;
  /**
   * Format: int32
   * @description The contractor's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * Format: date-time
   * @description When the contractor accepted the invitation
   * @example 2023-01-04T00:04:07.561Z
   */
  invitation_accepted_at?: string;
  /**
   * Format: date-time
   * @description When the contractor was sent an invitation to onboard
   * @example 2023-01-04T00:04:07.561Z
   */
  invited_at?: string;
  /**
   * @description The contractor's last name
   * @example Smith
   */
  last_name?: string;
  /**
   * @description The contractor's phone number
   * @example 222-333-4444
   */
  phone_number?: string;
  /**
   * @description The contractor's social security number
   * @example 222-33-4444
   */
  social_security?: string;
  /**
   * @description The contractor's state
   * @example NY
   */
  state?: string;
  /**
   * @description The contractor's zip code
   * @example 10010
   */
  zip?: string;
};
export type ContractorEntity = {
  /**
   * @description The contractor's 1st address line
   * @example 123 Main st
   */
  address1?: string;
  /**
   * @description The contractor's 2nd address line
   * @example Suite 100
   */
  address2?: string;
  /**
   * Format: date
   * @description The contractor's birthdate
   * @example 12/31/2021
   */
  birthdate?: string;
  /**
   * @description The contractor's city
   * @example New York
   */
  city?: string;
  /**
   * Format: date-time
   * @description When the contractor record was created
   * @example 2023-01-04T00:04:07.726Z
   */
  created_at?: string;
  /**
   * @description The contractor's email address
   * @example contractor@example.com
   */
  email?: string;
  /**
   * @description The contractor's first name
   * @example John
   */
  first_name?: string;
  /**
   * @description The contractor has connected an ACH account for receiving payments
   * @example true
   */
  has_ach?: boolean;
  /**
   * @description The contractor has a debit card for receiving payments
   * @example true
   */
  has_debit?: boolean;
  /**
   * Format: int32
   * @description The contractor's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * Format: date-time
   * @description When the contractor accepted the invitation
   * @example 2023-01-04T00:04:07.725Z
   */
  invitation_accepted_at?: string;
  /**
   * Format: date-time
   * @description When the contractor was sent an invitation to onboard
   * @example 2023-01-04T00:04:07.725Z
   */
  invited_at?: string;
  /**
   * @description The contractor's last name
   * @example Smith
   */
  last_name?: string;
  /**
   * @description The contractor's phone number
   * @example 222-333-4444
   */
  phone_number?: string;
  /**
   * @description The contractor's social security number
   * @example 222-33-4444
   */
  social_security?: string;
  /**
   * @description The contractor's state
   * @example NY
   */
  state?: string;
  /**
   * @description The contractor's zip code
   * @example 10010
   */
  zip?: string;
};
/** @description ContractorInvitationEntity model */
export type ContractorInvitationEntity = {
  /**
   * Format: date-time
   * @description When the contractor was sent an invitation to onboard
   * @example 2023-01-04T00:04:07.722Z
   */
  created_at?: string;
  /**
   * @description The contractor's email address
   * @example contractor@example.com
   */
  email?: string;
  /**
   * @description The contractor's first name
   * @example John
   */
  first_name?: string;
  /**
   * Format: int32
   * @description The contractor's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * @description The contractor's last name
   * @example Smith
   */
  last_name?: string;
  /**
   * @description The contractor's invitation token
   * @example 1234567890
   */
  token?: string;
  /**
   * @description The contractor's invitation url
   * @example https://gigwage.com/invite/1234567
   */
  url?: string;
};
/** @description CustomerEntity model */
export type CustomerEntity = {
  /**
   * @description The customer's 1st address line
   * @example 123 Main st
   */
  address1?: string;
  /**
   * @description The customer's 2nd address line
   * @example Suite 100
   */
  address2?: string;
  /**
   * @description The customer's city
   * @example New York
   */
  city?: string;
  /**
   * Format: date-time
   * @description When the customer record was created
   * @example 2023-01-04T00:04:08.135Z
   */
  created_at?: string;
  /**
   * @description When the customer record was deleted
   * @example 2023-01-04T00:04:08.135Z
   */
  deleted_at?: string;
  /**
   * @description The customer's email address
   * @example customer@example.com
   */
  email?: string;
  /**
   * @description Optional customer-supplied unique identifier for this customer
   * @example abc123
   */
  external_id?: string;
  /**
   * Format: int32
   * @description The customer's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * @description The customer's full name
   * @example John
   */
  name?: string;
  /**
   * @description The customer's phone number
   * @example 222-333-4444
   */
  phone_number?: string;
  /**
   * @description The customer's state
   * @example NY
   */
  state?: string;
  /**
   * @description The customer's zip code
   * @example 10010
   */
  zip?: string;
};
/** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
export type postApiV1ContractorsIdW9 = {
  contractor: {
    /** @description Line address 1 */
    address1: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * @description Allow skip TIN check when nine zeros are passed - '0000000000'
     * @default false
     */
    allow_tin_skip?: boolean;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate?: string;
    /** @description Vendor business name. Required for vendors */
    business_name?: string;
    /** @description City */
    city: string;
    /** @description Vendor's DBA */
    dba?: string;
    /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
    ein?: string;
    /** @description Contractor email address */
    email?: string;
    /**
     * Format: int32
     * @description Exempt payee code
     */
    exempt_payee_code?: number;
    /** @description Exemption from FATCA reporting code */
    fatca_reporting_exemption_code?: string;
    first_name?: string;
    last_name?: string;
    /**
     * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
     * @enum {string}
     */
    llc_classification?: 'C' | 'S' | 'P';
    /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
    other_classification?: string;
    /** @description Paper or Digital 1099 */
    paper_1099?: boolean;
    /**
     * @description Contractor's federal tax classification is required
     * @enum {string}
     */
    tax_classification:
      | 'single_member_llc'
      | 'c_corporation'
      | 's_corporation'
      | 'partnership'
      | 'trust_estate'
      | 'limited_liability_company'
      | 'other';
    /** @description Zip code */
    zip: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state: string;
    /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Contractor's social security number. For example: 123-12-1234 */
    social_security?: string;
  };
};
/** @description Submit KYC (know your customer) information for a contractor */
export type postApiV1ContractorsIdKyc = {
  contractor: {
    /** @description Line address 1 */
    address1: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate: string;
    /** @description Vendor's formation date. Required for vendors */
    business_formed_on?: string;
    /** @description Vendor business name. Required for vendors */
    business_name?: string;
    /** @description City */
    city: string;
    /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
    ein?: string;
    /** @description Contractor email address */
    email?: string;
    /** @description Vendor's Entity. Required for vendors */
    entity?: string;
    first_name?: string;
    /** @description Vendor's Industry. Required for vendors */
    industry?: string;
    last_name?: string;
    /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number: string;
    /** @description Contractor's social security number. For example: 123-12-1234. Required for non-vendors */
    social_security?: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state: string;
    /** @description Update contractor with KYC details and become a Vendor */
    vendor?: boolean;
    /** @description Zip code */
    zip: string;
  };
};
/** @description Add a bank account to an existing contractor. */
export type postApiV1ContractorsContractorIdAccounts = {
  account: {
    /** @description Bank account number */
    account_number: string;
    /** @description Account type. `checking` or `savings` */
    account_type: string;
    /** @description Bank account's nickname */
    name: string;
    /** @description Routing number */
    routing_number: string;
  };
};
/** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
export type patchApiV1Contractors = {
  contractor: {
    /** @description Line address 1 */
    address1?: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate?: string;
    /** @description City */
    city?: string;
    /** @description Contractor email address */
    email?: string;
    /** @description Customer assigned ID */
    external_id?: string;
    first_name?: string;
    last_name?: string;
    /** @description Contractor's phone number. Required if address exists. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Contractor's social security number. For example: 123-12-12345 */
    social_security?: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state?: string;
    /** @description Zip code */
    zip?: string;
  };
};
/** @description Add debit card to contractor */
export type postApiV1ContractorsContractorIdCards = {
  card: {
    /** @description Card number */
    card_number: string;
    /** @description Expiration date (yyyymm) */
    exp_date: string;
    /** @description A name for this account */
    name: string;
  };
};
/** @description Upload identity document */
export type postApiV1ContractorsContractorIdIdentityDocument = {
  identity_document: {
    /** @description The back page of document file (Image or PDF) */
    back: string;
    /** @description The front page of document file (Image or PDF) */
    front: string;
    /**
     * @description The document type. Can be passport or driver_license
     * @enum {string}
     */
    subtype: 'driver_license' | 'passport';
  };
};
export type TransactionEntity = {
  /**
   * Format: date-time
   * @description When the transaction was created
   * @example 2023-01-04T00:04:08.128Z
   */
  created_at?: string;
  /**
   * @description Description of transaction
   * @example Payment to Contractor One
   */
  description?: string;
  /**
   * Format: int32
   * @description The transaction's unique identifier
   * @example 42
   */
  id?: number;
  /**
   * Format: float
   * @description The amount of incoming transaction
   * @example 9912.23
   */
  incoming?: number;
  /**
   * Format: float
   * @description The amount of outgoing transaction
   * @example 12315.25
   */
  outgoing?: number;
  /**
   * @description The current status of the transaction
   * @example Settled
   */
  status?: string;
};
/** @description TransferTransactionEntity model */
export type TransferTransactionEntity = {
  /**
   * Format: float
   * @description The amount of the transfer
   * @example 10.99
   */
  amount?: number;
  /**
   * Format: date-time
   * @description When the transfer was created
   * @example 2023-01-04T00:04:07.910Z
   */
  created_at?: string;
  /**
   * @description Fund or Withdraw
   * @example fund
   */
  direction?: string;
  /**
   * Format: int32
   * @description The transfer's unique identifier
   * @example 42
   */
  id?: number;
  /**
   * @description The current status of the transfer
   * @example SETTLED
   */
  status?: string;
};
/** @description LineItemEntity model */
export type LineItemEntity = {
  /**
   * Format: float
   * @description The amount of the line item in dollars
   * @example 10.99
   */
  amount?: number;
  /**
   * @description Optional customer-supplied unique identifier for this line item
   * @example def456
   */
  external_id?: string;
  /**
   * Format: int32
   * @description The line_item's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * @description Optional customer-supplied association with a job
   * @example abc123
   */
  job_id?: string;
  /**
   * @description Line item metadata
   * @example {"YTD payments": 100}
   */
  metadata?: string;
  /**
   * @description The user-supplied note for this line item
   * @example Payment for 10/30/21
   */
  reason?: string;
  /**
   * @description Whether this line item represents a reimbursement for a contractor's expense
   * @example false
   */
  reimbursement?: boolean;
};
/** @description Ten99Entity model */
export type Ten99Entity = {
  /**
   * @description Account Number
   * @example abc123
   */
  account_number?: string;
  box1?: string;
  box10?: string;
  box11?: string;
  box12?: string;
  box13?: string;
  box14?: string;
  box15a?: string;
  box15b?: string;
  box16aState?: string;
  box16aStateNo?: string;
  box16bState?: string;
  box16bStateNo?: string;
  box5a?: string;
  box5b?: string;
  box6a?: string;
  box6b?: string;
  box7a?: string;
  box7b?: string;
  box1a?: string;
  box1b?: string;
  box3?: string;
  box5c?: string;
  box5d?: string;
  box5e?: string;
  box5f?: string;
  box5g?: string;
  box5h?: string;
  box5i?: string;
  box5j?: string;
  box5k?: string;
  box5l?: string;
  box8a?: string;
  box8b?: string;
  box5?: string;
  box6?: string;
  box7?: string;
  box8?: string;
  box9?: string;
  /**
   * Format: int32
   * @description The tax year covered by this 1099
   * @example 2020
   */
  year?: number;
  /**
   * @description The status of the 1099
   * @example submitted
   */
  status?: string;
  /**
   * @description The 1099 subtype
   * @example Ten99Nec
   */
  type?: string;
  /**
   * @description Validation errors
   * @example First name is missing
   */
  validation_errors?: Record<string, never>[];
  /**
   * Format: int32
   * @description The 1099's unique identifier
   * @example 42
   */
  id?: number;
  /**
   * Format: int32
   * @description Id of a 1099 corrected by this one
   * @example 234
   */
  corrected?: number;
  /**
   * Format: int32
   * @description Id of this 1099's correction, if it has one
   * @example 987
   */
  correction?: number;
  /**
   * Format: int32
   * @description The ID of the contractor the 1099 was issued for
   * @example 123
   */
  contractor_id?: number;
  second_tin?: string;
  box4?: string;
  box2?: string;
  box17a?: string;
  box17b?: string;
};
/** @description WebhookSubscriptionEntity model */
export type WebhookSubscriptionEntity = {
  /**
   * Format: date-time
   * @description When the subscription was created
   * @example 2023-01-04T00:04:08.062Z
   */
  created_at?: string;
  /**
   * Format: date-time
   * @description When the subscription was deactivated
   * @example 2023-01-04T00:04:08.062Z
   */
  deactivated_at?: string;
  /**
   * Format: int32
   * @description The subscription's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * @description URL to deliver webhooks to
   * @example https://example.org/hook
   */
  url?: string;
  /**
   * @description Webhook type
   * @example emitted
   */
  webhook_type?: string;
};
/** @description Update a line item's metadata. */
export type putApiV1LineItems = {
  line_item: {
    metadata?: Record<string, never>;
  };
};
/** @description PaymentEntity model */
export type PaymentEntity = {
  /**
   * Format: float
   * @description The total payment amount excluding fees
   * @example 409.4
   */
  amount?: number;
  /**
   * Format: date-time
   * @description When the payment was completed, if applicable. This is an estimation provided by the receiving bank.
   * @example 2022-12-07T00:04:07.726Z
   */
  completed_at?: string;
  contractor?: ContractorEntity;
  /**
   * Format: int32
   * @example 21488
   */
  contractor_id?: number;
  /**
   * Format: date-time
   * @description When the payment was created
   * @example 2022-12-04T00:04:07.726Z
   */
  created_at?: string;
  /**
   * @description Optional customer-supplied unique identifier for this payment
   * @example abc123
   */
  external_id?: string;
  /**
   * Format: int32
   * @description The payments's unique identifier
   * @example 424542
   */
  id?: number;
  line_items?: LineItemEntity[];
  /**
   * @description Payment metadata JSON
   * @example {"contact_phone_number": "222-333-4444"}
   */
  metadata?: string;
  /**
   * Format: float
   * @description The amount deposited, after fees
   * @example 408.9
   */
  net_deposit_amount?: number;
  /**
   * Format: float
   * @description The total fee charged to recipient
   * @example 0.5
   */
  recipient_fee?: number;
  /**
   * Format: float
   * @description The total fee charged to sender
   * @example 0.49
   */
  sender_fee?: number;
  /**
   * @description The current status of the payment
   * @example pending
   */
  status?: string;
};
/** @description Updates an existing contractor. If the contractor has already registered, changes to the email address will not affect email delivery. Emails will be delivered to the address managed by the contractor. Any supported attributes not supplied in the request will not be changed. */
export type patchApiV1BusinessesBusinessIdContractors = {
  contractor: {
    /** @description Line address 1 */
    address1?: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate?: string;
    /** @description City */
    city?: string;
    /** @description Contractor email address */
    email?: string;
    /** @description Customer assigned ID */
    external_id?: string;
    first_name?: string;
    last_name?: string;
    /** @description Contractor's phone number. Required if address exists. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Contractor's social security number. For example: 123-12-12345 */
    social_security?: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state?: string;
    /** @description Zip code */
    zip?: string;
  };
};
/** @description Create a new API key. Note: This is the only time you'll get the secret. */
export type postApiV1ApiKeys = {
  api_key: {
    /** @description API Key name */
    name?: string;
    /** @description Create a key for simplified sandbox authentication */
    test_key?: boolean;
  };
};
/** @description Creates a new contractor. */
export type postApiV1Contractors = {
  contractor: {
    /** @description Contractor email address */
    email: string;
    /** @description Customer assigned ID */
    external_id?: string;
    /** @description Contractor's first name */
    first_name: string;
    /** @description Contractor's last name */
    last_name: string;
    /**
     * @description Send email invitation when set to TRUE
     * @default false
     */
    send_invite?: boolean;
  };
};
/** @description Subscribe to webhooks of the chosen type. Please note that multiple consecutive failures to deliver webhooks will deactivate this subscription, and it will need to be reactivated. See PUT below. */
export type postApiV1Subscriptions = {
  subscription: {
    /** @description URL that the webhook will be sent to */
    url: string;
    /** @description Webhook type, can be payment, tin_check, partner_sign_up, 1099 */
    webhook_type: string;
  };
};
/** @description Update a payment's metadata. */
export type putApiV1Payments = {
  payment: {
    metadata?: Record<string, never>;
  };
};
/** @description Change the URL where webhooks are sent. */
export type patchApiV1Subscriptions = {
  subscription: {
    /** @description URL that the webhook will be sent to */
    url: string;
  };
};
/** @description Creates a new batch of payments. */
export type postApiV1Batches = {
  batch: {
    nonce: string;
    notes?: string;
    payments: {
      /** Format: int32 */
      contractor_id: number;
      /**
       * @default null
       * @enum {string}
       */
      debit_card?: true | '' | 'true' | 'false' | '';
      external_id?: string;
      /**
       * @default null
       * @enum {string}
       */
      interchange?: true | '' | 'true' | 'false' | '';
      line_items: {
        /** Format: float */
        amount: number;
        external_id?: string;
        job_id?: string;
        metadata?: Record<string, never>;
        reason?: string;
        /** @default false */
        reimbursement?: boolean;
      }[];
      metadata?: Record<string, never>;
    }[];
  };
};
/** @description W9Entity model */
export type W9Entity = {
  /**
   * @description 1st address line
   * @example 123 Main st
   */
  address1?: string;
  /**
   * @description 2nd address line
   * @example Suite 100
   */
  address2?: string;
  /**
   * Format: date
   * @description Birthdate
   * @example 12/31/1990
   */
  birthdate?: string;
  /**
   * @description Vendor business name
   * @example Business Company Enterprises
   */
  business_name?: string;
  /**
   * @description City
   * @example New York
   */
  city?: string;
  /**
   * @description Vendor's DBA
   * @example BCE
   */
  dba?: string;
  /**
   * @description Vendor's EIN
   * @example 11-222222
   */
  ein?: string;
  /**
   * @description Email
   * @example entity@example.com
   */
  email?: string;
  /**
   * Format: int32
   * @description Exempt payee code
   * @example 5
   */
  exempt_payee_code?: number;
  /**
   * @description Exemption from FACTA reporting code
   * @example E
   */
  fatca_reporting_exemption_code?: string;
  /**
   * @description First name
   * @example John
   */
  first_name?: string;
  /**
   * @description Last name
   * @example Smith
   */
  last_name?: string;
  /**
   * @description Tax classification for LLC
   * @example C
   */
  llc_classification?: string;
  /**
   * @description Other Classification for LLC
   * @example Sole Proprietor
   */
  other_classification?: string;
  /**
   * @description Contractor prefers to receive a paper 1099
   * @example true
   */
  paper_1099?: boolean;
  /**
   * @description Phone number
   * @example 222-333-4444
   */
  phone_number?: string;
  /**
   * @description Social security number.
   * @example 111-22-3333
   */
  social_security?: string;
  /**
   * @description State
   * @example NY
   */
  state?: string;
  /**
   * @description Federal tax classification
   * @example single_member_llc
   */
  tax_classification?: string;
  /**
   * @description Reason for TIN check results if applicable
   * @example TIN and Name combination does not match IRS record
   */
  tin_check_reason?: string;
  /**
   * @description Results of instant TIN check
   * @example pending
   */
  tin_check_status?: string;
  /**
   * @description Vendor or regular contractor?
   * @example true
   */
  vendor?: boolean;
  /**
   * @description Zip code
   * @example 10010
   */
  zip?: string;
};
/** @description SubaccountEntity model */
export type SubaccountEntity = {
  /**
   * Format: double
   * @description The subaccount available balance
   * @example 85
   */
  available_balance?: number;
  /**
   * Format: double
   * @description The subaccount current balance
   * @example 100
   */
  current_balance?: number;
};
/** @description Create a 1099 for a contractor. */
export type postApiV11099s = {
  1099: {
    /** @description Box 1 (decimal) - Type NEC only */
    box1?: string;
    /** @description Box 1a (decimal) - Type K only */
    box1a?: string;
    /** @description Box 1b (decimal) - Type K only */
    box1b?: string;
    /** @description Box 2 (boolean for NEC, string for K) */
    box2?: boolean;
    /** @description Box 3 (decimal) - Type K only */
    box3?: string;
    /** @description Box 4 (decimal) */
    box4?: string;
    /** @description Box 5a (decimal) */
    box5a?: string;
    /** @description Box 5b (decimal) */
    box5b?: string;
    /** @description Box 5c (decimal) - Type K only */
    box5c?: string;
    /** @description Box 5d (decimal) - Type K only */
    box5d?: string;
    /** @description Box 5e (decimal) - Type K only */
    box5e?: string;
    /** @description Box 5f (decimal) - Type K only */
    box5f?: string;
    /** @description Box 5g (decimal) - Type K only */
    box5g?: string;
    /** @description Box 5h (decimal) - Type K only */
    box5h?: string;
    /** @description Box 5i (decimal) - Type K only */
    box5i?: string;
    /** @enum {string} */
    type: 'K' | 'NEC' | 'MISC';
    /** Format: int32 */
    contractor_id: number;
    /** @description Box 5j (decimal) - Type K only */
    box5j?: string;
    /** @description Box 5k (decimal) - Type K only */
    box5k?: string;
    /** @description Box 5l (decimal) - Type K only */
    box5l?: string;
    /** @description Box 6a (string) */
    box6a?: string;
    /** @description Box 6b (string) */
    box6b?: string;
    /** @description Box 7a (decimal) - Type NEC only */
    box7a?: string;
    /** @description Box 7b (decimal) - Type NEC only */
    box7b?: string;
    /** @description Box 8a (decimal) - Type K only */
    box8a?: string;
    /** @description Box 8b (decimal) - Type K only */
    box8b?: string;
  };
};
/** @description Update a 1099 */
export type patchApiV11099s = {
  1099: {
    /** @description Box 1a (decimal) - Type K only */
    box1a?: string;
    /** @description Box 1b (decimal) - Type K only */
    box1b?: string;
    /** @description Box 2 (boolean) - Type NEC only */
    box2?: boolean;
    /** @description Box 3 (decimal) - Type K only */
    box3?: string;
    /** @description Box 4 (decimal) */
    box4?: string;
    /** @description Box 5a (decimal) */
    box5a?: string;
    /** @description Box 5b (decimal) */
    box5b?: string;
    /** @description Box 5c (decimal) - Type K only */
    box5c?: string;
    /** @description Box 5d (decimal) - Type K only */
    box5d?: string;
    /** @description Box 5e (decimal) - Type K only */
    box5e?: string;
    /** @description Box 5f (decimal) - Type K only */
    box5f?: string;
    /** @description Box 5g (decimal) - Type K only */
    box5g?: string;
    /** @description Box 5h (decimal) - Type K only */
    box5h?: string;
    /** @description Box 5i (decimal) - Type K only */
    box5i?: string;
    /** @description Box 5j (decimal) - Type K only */
    box5j?: string;
    /** @enum {string} */
    type: 'K' | 'NEC';
    /** Format: int32 */
    contractor_id: number;
    /** @description Box 5k (decimal) - Type K only */
    box5k?: string;
    /** @description Box 5l (decimal) - Type K only */
    box5l?: string;
    /** @description Box 6a (string) */
    box6a?: string;
    /** @description Box 6b (string) */
    box6b?: string;
    /** @description Box 7a (decimal) - Type NEC only */
    box7a?: string;
    /** @description Box 7b (decimal) - Type NEC only */
    box7b?: string;
    /** @description Box 8a (decimal) - Type K only */
    box8a?: string;
    /** @description Box 8b (decimal) - Type K only */
    box8b?: string;
  };
};
/** @description Create a 1099 for a contractor. */
export type postApiV1BusinessesBusinessId1099s = {
  1099: {
    /** @description Box 1 (decimal) - Type NEC only */
    box1?: string;
    /** @description Box 1a (decimal) - Type K only */
    box1a?: string;
    /** @description Box 1b (decimal) - Type K only */
    box1b?: string;
    /** @description Box 2 (boolean for NEC, string for K) */
    box2?: boolean;
    /** @description Box 3 (decimal) - Type K only */
    box3?: string;
    /** @description Box 4 (decimal) */
    box4?: string;
    /** @description Box 5a (decimal) */
    box5a?: string;
    /** @description Box 5b (decimal) */
    box5b?: string;
    /** @description Box 5c (decimal) - Type K only */
    box5c?: string;
    /** @description Box 5d (decimal) - Type K only */
    box5d?: string;
    /** @description Box 5e (decimal) - Type K only */
    box5e?: string;
    /** @description Box 5f (decimal) - Type K only */
    box5f?: string;
    /** @description Box 5g (decimal) - Type K only */
    box5g?: string;
    /** @description Box 5h (decimal) - Type K only */
    box5h?: string;
    /** @description Box 5i (decimal) - Type K only */
    box5i?: string;
    /** @enum {string} */
    type: 'K' | 'NEC' | 'MISC';
    /** Format: int32 */
    contractor_id: number;
    /** @description Box 5j (decimal) - Type K only */
    box5j?: string;
    /** @description Box 5k (decimal) - Type K only */
    box5k?: string;
    /** @description Box 5l (decimal) - Type K only */
    box5l?: string;
    /** @description Box 6a (string) */
    box6a?: string;
    /** @description Box 6b (string) */
    box6b?: string;
    /** @description Box 7a (decimal) - Type NEC only */
    box7a?: string;
    /** @description Box 7b (decimal) - Type NEC only */
    box7b?: string;
    /** @description Box 8a (decimal) - Type K only */
    box8a?: string;
    /** @description Box 8b (decimal) - Type K only */
    box8b?: string;
  };
};
/** @description LedgerEntity model */
export type LedgerEntity = {
  /**
   * Format: float
   * @description Available balance
   * @example 124510.99
   */
  available_balance?: number;
  /**
   * Format: float
   * @description Current balance
   * @example 132125.2
   */
  current_balance?: number;
  transactions?: TransactionEntity[];
};
/** @description Creates a new batch of payments. */
export type postApiV1BusinessesBusinessIdBatches = {
  batch: {
    nonce: string;
    notes?: string;
    payments: {
      /** Format: int32 */
      contractor_id: number;
      /**
       * @default null
       * @enum {string}
       */
      debit_card?: true | '' | 'true' | 'false' | '';
      external_id?: string;
      /**
       * @default null
       * @enum {string}
       */
      interchange?: true | '' | 'true' | 'false' | '';
      line_items: {
        /** Format: float */
        amount: number;
        external_id?: string;
        job_id?: string;
        metadata?: Record<string, never>;
        reason?: string;
        /** @default false */
        reimbursement?: boolean;
      }[];
      metadata?: Record<string, never>;
    }[];
  };
};
/** @description Creates a new contractor. */
export type postApiV1BusinessesBusinessIdContractors = {
  contractor: {
    /** @description Contractor email address */
    email: string;
    /** @description Customer assigned ID */
    external_id?: string;
    /** @description Contractor's first name */
    first_name: string;
    /** @description Contractor's last name */
    last_name: string;
    /**
     * @description Send email invitation when set to TRUE
     * @default false
     */
    send_invite?: boolean;
  };
};
/** @description Add a bank account to an existing contractor. */
export type postApiV1BusinessesBusinessIdContractorsContractorIdAccounts = {
  account: {
    /** @description Bank account number */
    account_number: string;
    /** @description Account type. `checking` or `savings` */
    account_type: string;
    /** @description Bank account's nickname */
    name: string;
    /** @description Routing number */
    routing_number: string;
  };
};
/** @description Updates an existing customer */
export type patchApiV1Customers = {
  customer: {
    /** @description Customer's account number. Example: 1231231234 */
    account_number?: string;
    /**
     * @description The account type. Can be checking or savings
     * @enum {string}
     */
    account_type?: 'checking' | 'savings';
    /** @description Line address 1 */
    address1?: string;
    /** @description Line address 2 */
    address2?: string;
    /** @description The authorization document file (Image or PDF) */
    authorization?: string;
    /** @description City */
    city?: string;
    /** @description Customer email address */
    email?: string;
    /** @description Customer assigned ID */
    external_id?: string;
    /** @description Customer's full name */
    name?: string;
    /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Customer's bank routing number. Example: 9923123 */
    routing_number?: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state?: string;
    /** @description Zip code */
    zip?: string;
  };
};
/** @description Creates a new Accounts Receivable Payment. */
export type postApiV1ArPayments = {
  ar_payment: {
    /** Format: float */
    amount: number;
    /** Format: int32 */
    customer_id: number;
    nonce: string;
    reason?: string;
  };
};
/** @description RecordError model */
export type RecordError = {
  /**
   * @description Summary error messages
   * @example Required field is missing
   */
  error?: string;
  /** @description Detail per error */
  messages?: string[];
};
/** @description Submit W9 information for a contractor you only want to create a 1099 for. This will also trigger an instant TIN check for the contractor. This contractor won't be able to accept payments, if you need them to receive payments use the KYC endpoint */
export type postApiV1BusinessesBusinessIdContractorsIdW9 = {
  contractor: {
    /** @description Line address 1 */
    address1: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * @description Allow skip TIN check when nine zeros are passed - '0000000000'
     * @default false
     */
    allow_tin_skip?: boolean;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate?: string;
    /** @description Vendor business name. Required for vendors */
    business_name?: string;
    /** @description City */
    city: string;
    /** @description Vendor's DBA */
    dba?: string;
    /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
    ein?: string;
    /** @description Contractor email address */
    email?: string;
    /**
     * Format: int32
     * @description Exempt payee code
     */
    exempt_payee_code?: number;
    /** @description Exemption from FATCA reporting code */
    fatca_reporting_exemption_code?: string;
    first_name?: string;
    last_name?: string;
    /**
     * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
     * @enum {string}
     */
    llc_classification?: 'C' | 'S' | 'P';
    /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
    other_classification?: string;
    /** @description Paper or Digital 1099 */
    paper_1099?: boolean;
    /**
     * @description Contractor's federal tax classification is required
     * @enum {string}
     */
    tax_classification:
      | 'single_member_llc'
      | 'c_corporation'
      | 's_corporation'
      | 'partnership'
      | 'trust_estate'
      | 'limited_liability_company'
      | 'other';
    /** @description Zip code */
    zip: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state: string;
    /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Contractor's social security number. For example: 123-12-1234 */
    social_security?: string;
  };
};
/** @description Create a transfer transaction. */
export type postApiV1Transfers = {
  transfer: {
    /** Format: double */
    amount: number;
    /** @enum {string} */
    direction: 'fund' | 'withdraw';
    nonce: string;
  };
};
/** @description Update W9 information for a contractor. */
export type patchApiV1BusinessesBusinessIdContractorsIdW9 = {
  contractor: {
    /** @description Line address 1 */
    address1?: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * @description Allow skip TIN check when nine zeros are passed - '0000000000'
     * @default false
     */
    allow_tin_skip?: boolean;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate?: string;
    /** @description Vendor business name. Required for vendors */
    business_name?: string;
    /** @description City */
    city?: string;
    /** @description Vendor's DBA */
    dba?: string;
    /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
    ein?: string;
    /** @description Contractor email address */
    email?: string;
    /**
     * Format: int32
     * @description Exempt payee code
     */
    exempt_payee_code?: number;
    /** @description Exemption from FATCA reporting code */
    fatca_reporting_exemption_code?: string;
    first_name?: string;
    last_name?: string;
    /**
     * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
     * @enum {string}
     */
    llc_classification?: 'C' | 'S' | 'P';
    /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
    other_classification?: string;
    /** @description Paper or Digital 1099 */
    paper_1099?: boolean;
    /** @description True when contractor is vendor */
    vendor?: boolean;
    /**
     * @description Contractor's federal tax classification is required
     * @enum {string}
     */
    tax_classification?:
      | 'single_member_llc'
      | 'c_corporation'
      | 's_corporation'
      | 'partnership'
      | 'trust_estate'
      | 'limited_liability_company'
      | 'other';
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state?: string;
    /** @description Zip code */
    zip?: string;
    /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Contractor's social security number. For example: 123-12-1234 */
    social_security?: string;
  };
};
/** @description Create a transfer transaction. */
export type postApiV1BusinessesBusinessIdTransfers = {
  transfer: {
    /** Format: double */
    amount: number;
    /** @enum {string} */
    direction: 'fund' | 'withdraw';
    nonce: string;
  };
};
/** @description Submit KYC (know your customer) information for a contractor */
export type postApiV1BusinessesBusinessIdContractorsIdKyc = {
  contractor: {
    /** @description Line address 1 */
    address1: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate: string;
    /** @description Vendor's formation date. Required for vendors */
    business_formed_on?: string;
    /** @description Vendor business name. Required for vendors */
    business_name?: string;
    /** @description City */
    city: string;
    /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
    ein?: string;
    /** @description Contractor email address */
    email?: string;
    /** @description Vendor's Entity. Required for vendors */
    entity?: string;
    first_name?: string;
    /** @description Vendor's Industry. Required for vendors */
    industry?: string;
    last_name?: string;
    /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number: string;
    /** @description Contractor's social security number. For example: 123-12-1234. Required for non-vendors */
    social_security?: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state: string;
    /** @description Update contractor with KYC details and become a Vendor */
    vendor?: boolean;
    /** @description Zip code */
    zip: string;
  };
};
/** @description Update W9 information for a contractor. */
export type patchApiV1ContractorsIdW9 = {
  contractor: {
    /** @description Line address 1 */
    address1?: string;
    /** @description Line address 2 */
    address2?: string;
    /**
     * @description Allow skip TIN check when nine zeros are passed - '0000000000'
     * @default false
     */
    allow_tin_skip?: boolean;
    /**
     * Format: date
     * @description Contractor's birthdate. Format: YYYY-MM-DD
     */
    birthdate?: string;
    /** @description Vendor business name. Required for vendors */
    business_name?: string;
    /** @description City */
    city?: string;
    /** @description Vendor's DBA */
    dba?: string;
    /** @description Vendor's EIN. Required for vendors. Example: 00-0000000 */
    ein?: string;
    /** @description Contractor email address */
    email?: string;
    /**
     * Format: int32
     * @description Exempt payee code
     */
    exempt_payee_code?: number;
    /** @description Exemption from FATCA reporting code */
    fatca_reporting_exemption_code?: string;
    first_name?: string;
    last_name?: string;
    /**
     * @description Contractor's tax classification for LLC is required if federal tax classification is Limited Liability Company
     * @enum {string}
     */
    llc_classification?: 'C' | 'S' | 'P';
    /** @description Other Classification for LLC is required if Federal Tax Classification is Other */
    other_classification?: string;
    /** @description Contractor's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description True when contractor is vendor */
    vendor?: boolean;
    /**
     * @description Contractor's federal tax classification is required
     * @enum {string}
     */
    tax_classification?:
      | 'single_member_llc'
      | 'c_corporation'
      | 's_corporation'
      | 'partnership'
      | 'trust_estate'
      | 'limited_liability_company'
      | 'other';
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state?: string;
    /** @description Zip code */
    zip?: string;
    /** @description Paper or Digital 1099 */
    paper_1099?: boolean;
    /** @description Contractor's social security number. For example: 123-12-1234 */
    social_security?: string;
  };
};
/** @description Add debit card to contractor */
export type postApiV1BusinessesBusinessIdContractorsContractorIdCards = {
  card: {
    /** @description Card number */
    card_number: string;
    /** @description Expiration date (yyyymm) */
    exp_date: string;
    /** @description A name for this account */
    name: string;
  };
};
/** @description Upload identity document */
export type postApiV1BusinessesBusinessIdContractorsContractorIdIdentityDocument =
  {
    identity_document: {
      /** @description The back page of document file (Image or PDF) */
      back: string;
      /** @description The front page of document file (Image or PDF) */
      front: string;
      /**
       * @description The document type. Can be passport or driver_license
       * @enum {string}
       */
      subtype: 'driver_license' | 'passport';
    };
  };
/** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
export type postApiV1BusinessesBusinessIdPayments = {
  payment: {
    /** Format: int32 */
    contractor_id: number;
    /**
     * @default null
     * @enum {string}
     */
    debit_card?: true | '' | 'true' | 'false' | '';
    external_id?: string;
    /**
     * @default null
     * @enum {string}
     */
    interchange?: true | '' | 'true' | 'false' | '';
    line_items: {
      /** Format: float */
      amount: number;
      external_id?: string;
      job_id?: string;
      metadata?: Record<string, never>;
      reason?: string;
      /** @default false */
      reimbursement?: boolean;
    }[];
    metadata?: Record<string, never>;
    nonce: string;
  };
};
/** @description Update a payment's metadata. */
export type putApiV1BusinessesBusinessIdPayments = {
  payment: {
    metadata?: Record<string, never>;
  };
};
/** @description Creates a new customer. */
export type postApiV1Customers = {
  customer: {
    /** @description Customer's account number. Example: 1231231234 */
    account_number: string;
    /**
     * @description The account type. Can be checking or savings
     * @enum {string}
     */
    account_type: 'checking' | 'savings';
    /** @description Line address 1 */
    address1: string;
    /** @description Line address 2 */
    address2?: string;
    /** @description The authorization document file (Image or PDF) */
    authorization: string;
    /** @description City */
    city: string;
    /** @description Customer email address */
    email: string;
    /** @description Customer assigned ID */
    external_id?: string;
    /** @description Customer's full name */
    name: string;
    /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number: string;
    /** @description Customer's bank routing number. Example: 9923123 */
    routing_number: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state: string;
    /** @description Zip code */
    zip: string;
  };
};
/** @description Sends a new payment to a contractor. Note: Payments sent on the sandbox environment typically settle within 5-10 minutes regardless of their type but can sometimes take longer. Please contact support if it takes more than 4 hours. */
export type postApiV1Payments = {
  payment: {
    /** Format: int32 */
    contractor_id: number;
    /**
     * @default null
     * @enum {string}
     */
    debit_card?: true | '' | 'true' | 'false' | '';
    external_id?: string;
    /**
     * @default null
     * @enum {string}
     */
    interchange?: true | '' | 'true' | 'false' | '';
    line_items: {
      /** Format: float */
      amount: number;
      external_id?: string;
      job_id?: string;
      metadata?: Record<string, never>;
      reason?: string;
      /** @default false */
      reimbursement?: boolean;
    }[];
    metadata?: Record<string, never>;
    nonce: string;
  };
};
/** @description Update a line item's metadata. */
export type putApiV1BusinessesBusinessIdLineItems = {
  line_item: {
    metadata?: Record<string, never>;
  };
};
/** @description WebhookEntity model */
export type WebhookEntity = {
  /**
   * Format: int32
   * @description The webhook's unique identifier
   * @example 123
   */
  id?: number;
  /**
   * Format: int32
   * @description The object's unique identifier
   * @example 234
   */
  object_id?: number;
  /**
   * @description The object's type
   * @example ACH-US
   */
  object_type?: string;
  /**
   * @description Data / payload sent to the subscription URL
   * @example {"some_data": "some_value"}
   */
  payload?: string;
  /**
   * Format: date-time
   * @description When the webhook was sent
   * @example 2023-01-04T00:04:08.119Z
   */
  sent_at?: string;
  /**
   * @description URL the webhook was sent to
   * @example https://example.org/webhook
   */
  url?: string;
};
/** @description Update a 1099 */
export type patchApiV1BusinessesBusinessId1099s = {
  1099: {
    /** @description Box 1a (decimal) - Type K only */
    box1a?: string;
    /** @description Box 1b (decimal) - Type K only */
    box1b?: string;
    /** @description Box 2 (boolean) - Type NEC only */
    box2?: boolean;
    /** @description Box 3 (decimal) - Type K only */
    box3?: string;
    /** @description Box 4 (decimal) */
    box4?: string;
    /** @description Box 5a (decimal) */
    box5a?: string;
    /** @description Box 5b (decimal) */
    box5b?: string;
    /** @description Box 5c (decimal) - Type K only */
    box5c?: string;
    /** @description Box 5d (decimal) - Type K only */
    box5d?: string;
    /** @description Box 5e (decimal) - Type K only */
    box5e?: string;
    /** @description Box 5f (decimal) - Type K only */
    box5f?: string;
    /** @description Box 5g (decimal) - Type K only */
    box5g?: string;
    /** @description Box 5h (decimal) - Type K only */
    box5h?: string;
    /** @description Box 5i (decimal) - Type K only */
    box5i?: string;
    /** @description Box 5j (decimal) - Type K only */
    box5j?: string;
    /** @description Box 5k (decimal) - Type K only */
    box5k?: string;
    /** @description Box 5l (decimal) - Type K only */
    box5l?: string;
    /** @description Box 6a (string) */
    box6a?: string;
    /** @description Box 6b (string) */
    box6b?: string;
    /** @enum {string} */
    type: 'K' | 'NEC';
    /** Format: int32 */
    contractor_id: number;
    /** @description Box 7a (decimal) - Type NEC only */
    box7a?: string;
    /** @description Box 7b (decimal) - Type NEC only */
    box7b?: string;
    /** @description Box 8a (decimal) - Type K only */
    box8a?: string;
    /** @description Box 8b (decimal) - Type K only */
    box8b?: string;
  };
};
/** @description Creates a new customer. */
export type postApiV1BusinessesBusinessIdCustomers = {
  customer: {
    /** @description Customer's account number. Example: 1231231234 */
    account_number: string;
    /**
     * @description The account type. Can be checking or savings
     * @enum {string}
     */
    account_type: 'checking' | 'savings';
    /** @description Line address 1 */
    address1: string;
    /** @description Line address 2 */
    address2?: string;
    /** @description The authorization document file (Image or PDF) */
    authorization: string;
    /** @description City */
    city: string;
    /** @description Customer email address */
    email: string;
    /** @description Customer assigned ID */
    external_id?: string;
    /** @description Customer's full name */
    name: string;
    /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number: string;
    /** @description Customer's bank routing number. Example: 9923123 */
    routing_number: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state: string;
    /** @description Zip code */
    zip: string;
  };
};
/** @description Updates an existing customer */
export type patchApiV1BusinessesBusinessIdCustomers = {
  customer: {
    /** @description Customer's account number. Example: 1231231234 */
    account_number?: string;
    /**
     * @description The account type. Can be checking or savings
     * @enum {string}
     */
    account_type?: 'checking' | 'savings';
    /** @description Line address 1 */
    address1?: string;
    /** @description Line address 2 */
    address2?: string;
    /** @description The authorization document file (Image or PDF) */
    authorization?: string;
    /** @description City */
    city?: string;
    /** @description Customer email address */
    email?: string;
    /** @description Customer assigned ID */
    external_id?: string;
    /** @description Customer's full name */
    name?: string;
    /** @description Customer's phone number. Example: 123-123-1234 or 1231231234 */
    phone_number?: string;
    /** @description Customer's bank routing number. Example: 9923123 */
    routing_number?: string;
    /** @description State, 2 characters US State Code (ISO 3166-2) */
    state?: string;
    /** @description Zip code */
    zip?: string;
  };
};
/** @description Creates a new Accounts Receivable Payment. */
export type postApiV1BusinessesBusinessIdArPayments = {
  ar_payment: {
    /** Format: float */
    amount: number;
    /** Format: int32 */
    customer_id: number;
    nonce: string;
    reason?: string;
  };
};
